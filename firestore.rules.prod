rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return isSignedIn() &&
        (request.auth.uid == resource.data.sellerUid || request.auth.uid == resource.data.ownerId);
    }

    function validNewListing() {
      return request.resource.data.keys().hasAll(["title","price","category","createdAt","sellerUid"]) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.title.size() <= 100 &&
             request.resource.data.price is number &&
             request.resource.data.price >= 0 &&
             request.resource.data.price <= 100000000 &&
             request.resource.data.category is string &&
             request.resource.data.sellerUid == request.auth.uid;
    }

    function onlyAllowedListingFieldsChanged() {
      return diff(resource.data, request.resource.data).changedKeys()
        .hasOnly(["title","price","description","images","thumbUrl","status","isSold","updatedAt","category","region"]);
    }

    match /market/{id} {
      allow read: if true;

      allow create: if isSignedIn() && validNewListing();

      allow update: if isOwner() &&
        onlyAllowedListingFieldsChanged() &&
        (
          // 가격 범위 유지
          (!request.resource.data.diff(resource.data).changedKeys().hasAny(["price"])) ||
          (request.resource.data.price is number && request.resource.data.price >= 0 && request.resource.data.price <= 100000000)
        ) &&
        // status↔isSold 일관성
        (
          !(request.resource.data.keys().hasAny(["status","isSold"])) ||
          (
            (request.resource.data.status in ["selling","reserved","sold"]) &&
            ((request.resource.data.status == "sold") == (request.resource.data.isSold == true))
          )
        );

      allow delete: if isOwner();
    }

    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.members;
      allow create: if isSignedIn() &&
        request.resource.data.members is list &&
        request.resource.data.members.size() == 2 &&
        request.resource.data.members.hasAll([request.auth.uid]);

      match /messages/{msgId} {
        allow read, create: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members &&
          (
            request.resource.data.text is string &&
            request.resource.data.text.size() > 0 &&
            request.resource.data.text.size() <= 2000
          );
      }
    }
  }
}