import * as functions from "firebase-functions";
import * as admin from "firebase-admin";
import fetch from "node-fetch";
// ‚úÖ Firebase Admin Ï¥àÍ∏∞Ìôî (Ï§ëÎ≥µ Î∞©ÏßÄ)
if (!admin.apps.length) {
    admin.initializeApp();
}
const db = admin.firestore();
/**
 * AI Ïã§ÏãúÍ∞Ñ Ïù¥ÏÉÅ ÌÉêÏßÄ ÏãúÏä§ÌÖú
 * - Firestore metrics Ïª¨Î†âÏÖò Î≥ÄÍ≤Ω Í∞êÏßÄ
 * - Ï†Ñ/ÌõÑ Îç∞Ïù¥ÌÑ∞ ÎπÑÍµê Î∞è Î≥ÄÌôîÏú® Í≥ÑÏÇ∞
 * - AI Î∂ÑÏÑù Î∞è Slack Í≤ΩÎ≥¥ Î∞úÏÜ°
 */
export const aiAnomalyWatcher = functions
    .region("asia-northeast3")
    .firestore.document("metrics/{docId}")
    .onWrite(async (change, context) => {
    var _a, _b, _c, _d, _e;
    console.log("üîç [AI ALERT] Anomaly detection triggered");
    const after = change.after.data();
    const before = change.before.data();
    // ÏÉà Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥Ï†Ñ Îç∞Ïù¥ÌÑ∞ ÏóÜÏúºÎ©¥ Ï¢ÖÎ£å
    if (!after) {
        console.log("‚è≠Ô∏è  [AI ALERT] No new data, skipping");
        return null;
    }
    if (!before) {
        console.log("‚è≠Ô∏è  [AI ALERT] No previous data, skipping (first write)");
        return null;
    }
    // Í∞êÏãú ÎåÄÏÉÅ ÌïÑÎìú
    const fields = ["sales", "signups", "activities"];
    const diffs = [];
    // Î≥ÄÌôîÏú® Í≥ÑÏÇ∞
    for (const field of fields) {
        if (typeof after[field] === "number" && typeof before[field] === "number") {
            const diff = before[field] !== 0
                ? ((after[field] - before[field]) / before[field]) * 100
                : 0;
            diffs.push({
                field,
                diff: Math.round(diff * 10) / 10, // ÏÜåÏàòÏ†ê 1ÏûêÎ¶¨
                value: after[field],
                prevValue: before[field],
            });
        }
    }
    console.log("üìä [AI ALERT] Calculated diffs:", diffs);
    // 10% Ïù¥ÏÉÅ Î≥ÄÎèôÎßå Î∂ÑÏÑù ÎåÄÏÉÅÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ
    const anomalies = diffs.filter((d) => Math.abs(d.diff) >= 10);
    if (anomalies.length === 0) {
        console.log("‚úÖ [AI ALERT] No significant anomalies detected");
        return null;
    }
    console.log("‚ö†Ô∏è  [AI ALERT] Anomalies detected:", anomalies);
    // AI Î∂ÑÏÑù
    const openaiKey = ((_a = functions.config().openai) === null || _a === void 0 ? void 0 : _a.key) || process.env.VITE_OPENAI_API_KEY;
    const slackWebhook = ((_b = functions.config().slack) === null || _b === void 0 ? void 0 : _b.webhook) || process.env.VITE_SLACK_WEBHOOK_URL;
    if (!openaiKey) {
        console.error("‚ùå [AI ALERT] OpenAI API Key not configured");
        return null;
    }
    const prompt = `
ÎãπÏã†ÏùÄ YAGO VIBE ÌîåÎû´ÌèºÏùò Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ AIÏûÖÎãàÎã§.
Îã§Ïùå ÏàòÏπò Î≥ÄÌôîÎ•º Î∂ÑÏÑùÌïòÍ≥† Í≤ΩÍ≥† Î©îÏãúÏßÄÎ•º ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî.

Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôî:
${anomalies.map((a) => `- ${a.field}: ${a.prevValue} ‚Üí ${a.value} (${a.diff > 0 ? '+' : ''}${a.diff}%)`).join('\n')}

ÏöîÍµ¨ÏÇ¨Ìï≠:
1Ô∏è‚É£ Í∞Å Ìï≠Î™©Ïùò Í∏âÎì±/Í∏âÎùΩ ÏõêÏù∏ÏùÑ Ï∂îÏ†ï
2Ô∏è‚É£ ÎπÑÏ¶àÎãàÏä§ ÏòÅÌñ•ÎèÑ Î∂ÑÏÑù
3Ô∏è‚É£ 1~2Ï§Ñ ÏöîÏïΩ Í≤ΩÍ≥† Î¨∏Ïû• ÏÉùÏÑ±
4Ô∏è‚É£ Slack Í≥µÏßÄÏö©ÏúºÎ°ú Í∞ÑÍ≤∞ÌïòÍ≤å Ìè¨Îß∑ÌåÖ

Ï∂úÎ†• ÌòïÏãù:
[ÏöîÏïΩ] Ìïú Ï§Ñ ÏöîÏïΩ
[Î∂ÑÏÑù] ÏÉÅÏÑ∏ Î∂ÑÏÑù (Í∞ÑÍ≤∞ÌïòÍ≤å)
[Ï°∞Ïπò] Í∂åÏû• Ï°∞ÏπòÏÇ¨Ìï≠ (ÏÑ†ÌÉùÏ†Å)
`;
    try {
        const aiResp = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                Authorization: `Bearer ${openaiKey}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.4,
                max_tokens: 500,
            }),
        });
        const aiData = await aiResp.json();
        const summary = ((_e = (_d = (_c = aiData.choices) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.message) === null || _e === void 0 ? void 0 : _e.content) || "AI Î∂ÑÏÑù Ïã§Ìå®";
        console.log("üß† [AI ALERT] AI analysis completed");
        // Slack ÏïåÎ¶º Î©îÏãúÏßÄ
        if (slackWebhook) {
            const slackMessage = {
                text: `‚ö†Ô∏è *YAGO VIBE Ïã§ÏãúÍ∞Ñ Í≤ΩÎ≥¥*`,
                blocks: [
                    {
                        type: "header",
                        text: {
                            type: "plain_text",
                            text: "‚ö†Ô∏è YAGO VIBE Ïã§ÏãúÍ∞Ñ Í≤ΩÎ≥¥",
                        },
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: `*ÏãúÍ∞Ñ:* ${new Date().toLocaleString("ko-KR")}\n*Î¨∏ÏÑú ID:* ${context.params.docId}`,
                        },
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: `*üìä Í∞êÏßÄÎêú Ïù¥ÏÉÅ ÏßïÌõÑ:*\n${anomalies
                                .map((a) => `‚Ä¢ *${a.field}*: ${a.prevValue} ‚Üí ${a.value} (${a.diff > 0 ? "+" : ""}${a.diff}%)`)
                                .join("\n")}`,
                        },
                    },
                    {
                        type: "divider",
                    },
                    {
                        type: "section",
                        text: {
                            type: "mrkdwn",
                            text: `*üß† AI Î∂ÑÏÑù:*\n${summary}`,
                        },
                    },
                ],
            };
            await fetch(slackWebhook, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(slackMessage),
            });
            console.log("üí¨ [AI ALERT] Slack notification sent");
        }
        else {
            console.warn("‚ö†Ô∏è  [AI ALERT] Slack webhook not configured");
        }
        // FirestoreÏóê Í≤ΩÎ≥¥ Í∏∞Î°ù
        await db.collection("alerts").add({
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            docId: context.params.docId,
            summary,
            anomalies,
            severity: anomalies.some((a) => Math.abs(a.diff) >= 30) ? "high" : "medium",
        });
        console.log("‚úÖ [AI ALERT] Alert saved to Firestore");
        return { success: true, anomalies: anomalies.length };
    }
    catch (error) {
        console.error("‚ùå [AI ALERT] Error:", error);
        return null;
    }
});
//# sourceMappingURL=aiAlert.js.map