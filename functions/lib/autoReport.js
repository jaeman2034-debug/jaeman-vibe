import * as functions from "firebase-functions";
import * as admin from "firebase-admin";
import fetch from "node-fetch";
import jsPDF from "jspdf";
// ‚úÖ Firebase Admin Ï¥àÍ∏∞Ìôî (Ï§ëÎ≥µ Î∞©ÏßÄ)
if (!admin.apps.length) {
    admin.initializeApp();
}
const storage = admin.storage();
/**
 * Îß§Ï£º ÏõîÏöîÏùº Ïò§Ï†Ñ 09:00 (KST)Ïóê ÏûêÎèôÏúºÎ°ú IR Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
 * - AI ÏöîÏïΩ ÏÉùÏÑ±
 * - PDF ÏÉùÏÑ± Î∞è Firebase Storage ÏóÖÎ°úÎìú
 * - n8n WebhookÏúºÎ°ú Ïù¥Î©îÏùº Î∞úÏÜ°
 * - Slack ÏïåÎ¶º
 */
export const scheduledIRReport = functions
    .region("asia-northeast3")
    .pubsub.schedule("0 9 * * 1") // ‚úÖ Îß§Ï£º ÏõîÏöîÏùº Ïò§Ï†Ñ 09:00
    .timeZone("Asia/Seoul")
    .onRun(async (context) => {
    var _a, _b, _c, _d, _e, _f, _g;
    console.log("üöÄ [AUTO REPORT] Weekly IR Report generation started...");
    try {
        // 1Ô∏è‚É£ Mock Data (Ïã§Ï†úÎ°úÎäî FirestoreÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞)
        const metrics = {
            sales: [120, 140, 160, 180, 220, 210, 240],
            signups: [12, 16, 14, 22, 19, 25, 28],
            activities: [310, 400, 380, 420, 450, 470, 520],
            topCategories: ["Ï∂ïÍµ¨", "ÎÜçÍµ¨", "Í≥®ÌîÑ", "ÏïºÍµ¨", "ÌÖåÎãàÏä§"],
        };
        console.log("üìä [AUTO REPORT] Metrics collected:", metrics);
        // 2Ô∏è‚É£ AI ÏöîÏïΩ ÏÉùÏÑ±
        const prompt = `
ÎãπÏã†ÏùÄ Ìà¨ÏûêÏûêÏö© IR Î∂ÑÏÑùÍ∞ÄÏûÖÎãàÎã§.
ÏïÑÎûò YAGO VIBE ÌîåÎû´ÌèºÏùò Ï£ºÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Ï†ÑÎ¨∏Ï†ÅÏù∏ IR ÏöîÏïΩÏùÑ ÏûëÏÑ±ÌïòÏÑ∏Ïöî.

Îç∞Ïù¥ÌÑ∞:
- Îß§Ï∂ú Ï∂îÏù¥ (7Ïùº): ${metrics.sales.join(", ")}
- Ïã†Í∑ú ÌöåÏõê (7Ïùº): ${metrics.signups.join(", ")}
- ÌôúÎèô Ïàò (7Ïùº): ${metrics.activities.join(", ")}
- Ïù∏Í∏∞ Ïπ¥ÌÖåÍ≥†Î¶¨: ${metrics.topCategories.join(", ")}

Ìè¨Ìï® ÎÇ¥Ïö©:
1. Ï£ºÍ∞Ñ ÏÑ±Í≥º ÏöîÏïΩ
2. Ìä∏Î†åÎìú Î∂ÑÏÑù
3. Ìñ•ÌõÑ Ï†ÑÎßù
4. Ìà¨Ïûê Ìè¨Ïù∏Ìä∏

Í∞ÑÍ≤∞ÌïòÍ≥† Ï†ÑÎ¨∏Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
`;
        const openaiApiKey = ((_a = functions.config().openai) === null || _a === void 0 ? void 0 : _a.key) || process.env.VITE_OPENAI_API_KEY;
        if (!openaiApiKey) {
            throw new Error("OpenAI API Key not configured");
        }
        const aiResp = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                Authorization: `Bearer ${openaiApiKey}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.7,
                max_tokens: 1000,
            }),
        });
        const aiData = await aiResp.json();
        const summary = ((_d = (_c = (_b = aiData.choices) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content) || "AI ÏöîÏïΩ ÏÉùÏÑ± Ïã§Ìå®";
        console.log("üß† [AUTO REPORT] AI Summary generated");
        // 3Ô∏è‚É£ PDF ÏÉùÏÑ±
        const pdf = new jsPDF({ orientation: "p", unit: "pt", format: "a4" });
        const pageWidth = pdf.internal.pageSize.getWidth();
        // PDF Ï†úÎ™©
        pdf.setFontSize(18);
        pdf.text("YAGO VIBE Weekly IR Report", 40, 50);
        // ÎÇ†Ïßú
        pdf.setFontSize(11);
        const reportDate = new Date().toLocaleDateString("ko-KR", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        pdf.text(reportDate, 40, 70);
        // AI ÏöîÏïΩ
        pdf.setFontSize(12);
        pdf.text("üìä AI Summary:", 40, 100);
        pdf.setFontSize(10);
        const splitText = pdf.splitTextToSize(summary, pageWidth - 80);
        pdf.text(splitText, 40, 120);
        // Ï£ºÏöî ÏßÄÌëú
        const metricsY = 120 + (splitText.length * 12) + 30;
        pdf.setFontSize(12);
        pdf.text("üìà Key Metrics:", 40, metricsY);
        pdf.setFontSize(10);
        pdf.text(`Ï¥ù Îß§Ï∂ú: ${metrics.sales.reduce((a, b) => a + b, 0).toLocaleString()}Ïõê`, 40, metricsY + 20);
        pdf.text(`Ïã†Í∑ú ÌöåÏõê: ${metrics.signups.reduce((a, b) => a + b, 0)}Î™Ö`, 40, metricsY + 35);
        pdf.text(`Ï¥ù ÌôúÎèô: ${metrics.activities.reduce((a, b) => a + b, 0).toLocaleString()}Í±¥`, 40, metricsY + 50);
        const pdfBuffer = Buffer.from(pdf.output("arraybuffer"));
        console.log("üìÑ [AUTO REPORT] PDF generated");
        // 4Ô∏è‚É£ Firebase Storage ÏóÖÎ°úÎìú
        const bucket = storage.bucket();
        const filename = `weekly_reports/IR_${Date.now()}.pdf`;
        const file = bucket.file(filename);
        await file.save(pdfBuffer, {
            metadata: {
                contentType: "application/pdf",
            },
        });
        // Public URL ÏÉùÏÑ±
        await file.makePublic();
        const publicUrl = `https://storage.googleapis.com/${bucket.name}/${filename}`;
        console.log("‚òÅÔ∏è [AUTO REPORT] Uploaded to:", publicUrl);
        // 5Ô∏è‚É£ n8n WebhookÏúºÎ°ú Ïù¥Î©îÏùº Î∞úÏÜ°
        const n8nWebhook = ((_e = functions.config().n8n) === null || _e === void 0 ? void 0 : _e.ir_webhook) || process.env.VITE_N8N_IR_WEBHOOK;
        const investorEmails = ((_f = functions.config().email) === null || _f === void 0 ? void 0 : _f.investors) || process.env.VITE_INVESTOR_EMAILS;
        if (n8nWebhook) {
            await fetch(n8nWebhook, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    subject: `[YAGO VIBE] Weekly IR Report - ${reportDate}`,
                    summary,
                    reportUrl: publicUrl,
                    to: (investorEmails === null || investorEmails === void 0 ? void 0 : investorEmails.split(",")) || [],
                }),
            });
            console.log("üìß [AUTO REPORT] Email sent via n8n");
        }
        // 6Ô∏è‚É£ Slack ÏïåÎ¶º
        const slackWebhook = ((_g = functions.config().slack) === null || _g === void 0 ? void 0 : _g.webhook) || process.env.VITE_SLACK_WEBHOOK_URL;
        if (slackWebhook) {
            await fetch(slackWebhook, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    text: `üìä *YAGO VIBE Weekly IR Report Generated!*\n\n*Date:* ${reportDate}\n\n*Summary:*\n${summary.substring(0, 200)}...\n\nüîó <${publicUrl}|View Full Report>`,
                }),
            });
            console.log("üí¨ [AUTO REPORT] Slack notification sent");
        }
        console.log("‚úÖ [AUTO REPORT] Weekly IR Report completed successfully!");
        return { success: true, reportUrl: publicUrl };
    }
    catch (error) {
        console.error("‚ùå [AUTO REPORT] Error:", error);
        throw error;
    }
});
//# sourceMappingURL=autoReport.js.map