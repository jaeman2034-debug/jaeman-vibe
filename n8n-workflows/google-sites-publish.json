{
  "name": "google-sites-publish",
  "nodes": [
    {
      "parameters": {
        "path": "google-sites-publish",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 200],
      "webhookMethods": {
        "POST": true
      },
      "name": "Webhook"
    },
    {
      "parameters": {
        "functionCode": "// 블록을 HTML로 변환\nconst { meetupId, title, blocks = [], siteId } = items[0].json;\n\nfunction toHtml(block) {\n  switch (block.type) {\n    case 'h1':\n      return `<h1>${block.text || ''}</h1>`;\n    case 'h2':\n      return `<h2>${block.text || ''}</h2>`;\n    case 'h3':\n      return `<h3>${block.text || ''}</h3>`;\n    case 'p':\n      return `<p>${block.text || ''}</p>`;\n    case 'img':\n      return `<img src=\"${block.src}\" alt=\"${block.alt || ''}\" style=\"max-width: 100%; height: auto;\"/>`;\n    case 'div':\n      return `<div class=\"${block.class || ''}\">${block.content || ''}</div>`;\n    case 'a':\n      return `<a href=\"${block.href}\" target=\"_blank\">${block.text || block.href}</a>`;\n    case 'ul':\n      const listItems = (block.items || []).map(item => `<li>${item}</li>`).join('');\n      return `<ul>${listItems}</ul>`;\n    case 'ol':\n      const orderedItems = (block.items || []).map(item => `<li>${item}</li>`).join('');\n      return `<ol>${orderedItems}</ol>`;\n    case 'blockquote':\n      return `<blockquote>${block.text || ''}</blockquote>`;\n    case 'hr':\n      return '<hr/>';\n    case 'br':\n      return '<br/>';\n    default:\n      return '';\n  }\n}\n\nconst html = blocks.map(toHtml).join('\\n');\nconst fullHtml = `\n  <div class=\"yago-meetup-page\">\n    <header>\n      <h1>${title}</h1>\n      <p class=\"meetup-id\">Meetup ID: ${meetupId}</p>\n    </header>\n    <main>\n      ${html}\n    </main>\n    <footer>\n      <p>Generated by YAGO Sports • ${new Date().toLocaleString()}</p>\n    </footer>\n  </div>\n`;\n\nreturn [{\n  json: {\n    meetupId,\n    title,\n    html: fullHtml,\n    siteId: siteId || process.env.GOOGLE_SITES_SITE_ID || 'REPLACE_SITE_ID'\n  }\n}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [420, 200],
      "name": "Blocks→HTML"
    },
    {
      "parameters": {
        "url": "=https://sites.googleapis.com/v1/sites/{{$json.siteId}}/pages",
        "requestMethod": "POST",
        "jsonParameters": true,
        "options": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n  \"page\": {\n    \"title\": \"{{$json.title}}\",\n    \"htmlContent\": \"{{$json.html}}\"\n  }\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [660, 200],
      "name": "Create Page",
      "credentials": {
        "googleApi": {
          "id": "google-oauth"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// 페이지 생성 후 추가 처리\nconst response = items[0].json;\nconst input = $node['Blocks→HTML'].json;\n\n// 페이지 URL 생성\nconst pageUrl = `https://sites.google.com/view/${input.siteId}/${response.name}`;\n\nreturn [{\n  json: {\n    success: true,\n    meetupId: input.meetupId,\n    pageId: response.name,\n    pageUrl: pageUrl,\n    title: input.title,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [880, 200],
      "name": "Process Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}"
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1100, 200],
      "name": "Success Response"
    },
    {
      "parameters": {
        "functionCode": "// 에러 처리\nconst error = items[0].json;\n\nreturn [{\n  json: {\n    success: false,\n    error: error.message || 'Unknown error',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [880, 400],
      "name": "Error Handler"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "responseCode": 500
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1100, 400],
      "name": "Error Response"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Blocks→HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Blocks→HTML": {
      "main": [
        [
          {
            "node": "Create Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Page": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "pinData": {}
}
