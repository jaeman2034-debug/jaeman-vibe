{
  "name": "YAGO VIBE - Daily Inventory Summary & Voice Report",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * *"
            }
          ]
        }
      },
      "name": "Daily Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [300, 200],
      "id": "daily-schedule"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "voice-report",
        "responseMode": "onReceived",
        "responseData": "={{$json}}"
      },
      "name": "Voice Report Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 400],
      "webhookId": "yago-voice-report",
      "id": "voice-report-webhook"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://api.openai.com/v1/chat/completions",
        "responseFormat": "json",
        "options": {},
        "headerParametersJson": "{ \"Authorization\": \"Bearer {{$env.OPENAI_API_KEY}}\", \"Content-Type\": \"application/json\" }",
        "bodyParametersJson": "={\"model\":\"gpt-4o-mini\",\"messages\":[{\"role\":\"user\",\"content\":\"다음은 YAGO VIBE 스포츠 마켓의 상품 데이터입니다.\\n\\n총 상품 수: {{$json.totalItems}}\\n활성 상품: {{$json.activeItems}}\\n거래 완료: {{$json.soldItems}}\\nAI 생성 상품: {{$json.aiGeneratedItems}}\\n음성 등록 상품: {{$json.voiceEnabledItems}}\\n\\n카테고리별 통계:\\n{{JSON.stringify($json.categoryStats, null, 2)}}\\n\\n이 데이터를 바탕으로 형님께 음성으로 보고할 자연스러운 한국어 메시지를 생성해주세요. 친근하고 간결하게, 마치 비서가 보고하는 것처럼 작성해주세요. 형님, 어제 등록한... 이런 식으로 시작해주세요.\"}]}"
      },
      "name": "OpenAI Text Summarizer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 200],
      "id": "openai-summarizer"
    },
    {
      "parameters": {
        "functionCode": "// Firestore 데이터를 시뮬레이션 (실제로는 Firestore 연결 필요)\nconst mockData = {\n  totalItems: 8,\n  activeItems: 6,\n  soldItems: 2,\n  aiGeneratedItems: 5,\n  voiceEnabledItems: 3,\n  categoryStats: {\n    \"축구화\": 3,\n    \"운동화\": 2,\n    \"유니폼\": 1,\n    \"글러브\": 1,\n    \"기타\": 1\n  }\n};\n\nreturn mockData;"
      },
      "name": "Mock Firestore Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 200],
      "id": "mock-firestore"
    },
    {
      "parameters": {
        "functionCode": "const aiResponse = $json.choices[0].message.content;\n\nreturn {\n  message: aiResponse,\n  timestamp: new Date().toISOString(),\n  stats: $('Mock Firestore Data').first().json\n};"
      },
      "name": "Format Voice Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 200],
      "id": "format-report"
    },
    {
      "parameters": {
        "responseBody": "={{$json}}",
        "responseCode": 200,
        "options": {}
      },
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1500, 200],
      "id": "respond-webhook"
    },
    {
      "parameters": {
        "functionCode": "// 실시간 상품 상태 조회 시뮬레이션\nconst now = new Date();\nconst yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\nconst recentItems = Math.floor(Math.random() * 5) + 1; // 1-5개\nconst activeItems = Math.floor(Math.random() * 10) + 5; // 5-14개\n\nreturn {\n  message: `형님, 최근 24시간 내에 ${recentItems}개의 새 상품이 등록되었습니다. 현재 활성 상품은 총 ${activeItems}개입니다.`,\n  recentItems,\n  activeItems,\n  timestamp: now.toISOString()\n};"
      },
      "name": "Real-time Stats",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 400],
      "id": "realtime-stats"
    },
    {
      "parameters": {
        "functionCode": "// 트렌드 분석 시뮬레이션\nconst thisWeek = Math.floor(Math.random() * 10) + 5; // 5-14개\nconst lastWeek = Math.floor(Math.random() * 8) + 3; // 3-10개\nconst growthRate = Math.round(((thisWeek - lastWeek) / lastWeek) * 100);\n\nreturn {\n  message: `형님, 이번 주 등록된 상품은 ${thisWeek}개입니다. 지난 주 대비 ${growthRate > 0 ? `${growthRate}% 증가` : growthRate < 0 ? `${Math.abs(growthRate)}% 감소` : '변화 없음'}했습니다.`,\n  thisWeek,\n  lastWeek,\n  growthRate,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Trend Analysis",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 600],
      "id": "trend-analysis"
    }
  ],
  "connections": {
    "Daily Schedule Trigger": {
      "main": [
        [
          {
            "node": "Mock Firestore Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice Report Webhook": {
      "main": [
        [
          {
            "node": "Real-time Stats",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trend Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mock Firestore Data": {
      "main": [
        [
          {
            "node": "OpenAI Text Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Text Summarizer": {
      "main": [
        [
          {
            "node": "Format Voice Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Voice Report": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Real-time Stats": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trend Analysis": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1.0.0"
}
