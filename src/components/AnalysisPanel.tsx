import React, { useState } from 'react';type Analysis = {  category: string;  condition: 'new'|'good'|'fair'|'poor';  priceEstimate: { low: number; high: number; currency: 'KRW' };  authenticityScore: number;  riskFlags: string[];  tags: string[];};export default function AnalysisPanel({  imageUrl, productId}: {  imageUrl: string;  productId: string;}) {  const [data, setData] = useState<Analysis | null>(null);  const [loading, setLoading] = useState(false);  const [err, setErr] = useState<string | null>(null);  const run = async (e: React.MouseEvent) => {    e.stopPropagation(); // ?¥Î≤§??Î≤ÑÎ∏îÎß?Î∞©Ï?    e.preventDefault();   // Í∏∞Î≥∏ ?ôÏûë Î∞©Ï?        setLoading(true);     setErr(null);    try {      const res = await fetch('/api/analyze', {        method: 'POST',        headers: { 'Content-Type':'application/json' },        body: JSON.stringify({ imageUrl, productId })      });      if (!res.ok) throw new Error(`HTTP ${res.status}`);      const j = await res.json();      setData(j);    } catch (e: any) {      setErr(e.message);    } finally {      setLoading(false);    }  };  return (    <div className="mt-2 border rounded-lg p-3 bg-white shadow-sm" onClick={(e) => e.stopPropagation()}>      <div className="flex items-center justify-between">        <span className="text-sm font-medium">AI Î∂ÑÏÑù</span>        <button          onClick={run}          disabled={loading}          className="text-xs px-3 py-1 rounded bg-indigo-50 hover:bg-indigo-100 text-indigo-700 disabled:opacity-50"        >          {loading ? 'Î∂ÑÏÑù Ï§ë‚Ä? : 'Î∂ÑÏÑù?òÍ∏∞'}        </button>      </div>      {err && <p className="mt-2 text-xs text-red-600">?§Ìå®: {err}</p>}      {data && (        <div className="mt-2 text-sm space-y-1">          <p>Ïπ¥ÌÖåÍ≥†Î¶¨: <b>{data.category}</b></p>          <p>?ÅÌÉú: <b>{labelCond(data.condition)}</b></p>          <p>AI Í∞ÄÍ≤??úÏïà: <b>{fmt(data.priceEstimate.low)} ~ {fmt(data.priceEstimate.high)}??/b></p>          <p>?ïÌíà Í∞Ä?•ÏÑ±: <b>{Math.round(data.authenticityScore*100)}%</b></p>          {!!data.riskFlags.length && (            <p className="text-amber-600">?†Ô∏è {data.riskFlags.join(', ')}</p>          )}          {!!data.tags.length && (            <p className="text-gray-500">#{data.tags.join(' #')}</p>          )}        </div>      )}    </div>  );}const labelCond = (c: Analysis['condition']) =>  ({new:'?àÏÉÅ??,good:'??,fair:'Ï§?,poor:'??} as any)[c];const fmt = (n: number) => n.toLocaleString('ko-KR');