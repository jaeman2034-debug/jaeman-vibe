import React, { useState, useEffect } from 'react';import { MapPin, ExternalLink } from 'lucide-react';export type LocationData = {  lat: number;  lng: number;  placeName?: string;};type Props = {  location: LocationData;  userLocation?: LocationData;  showMap?: boolean;};export default function DistanceBadge({ location, userLocation, showMap = true }: Props) {  const [distance, setDistance] = useState<number | null>(null);  const [isLoading, setIsLoading] = useState(false);  // Í±∞Î¶¨ Í≥ÑÏÇ∞  useEffect(() => {    if (userLocation && location) {      const calculatedDistance = calculateDistance(        userLocation.lat,        userLocation.lng,        location.lat,        location.lng      );      setDistance(calculatedDistance);    }  }, [location, userLocation]);  // Haversine Í≥µÏãù?ºÎ°ú Í±∞Î¶¨ Í≥ÑÏÇ∞ (km)  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {    const R = 6371; // ÏßÄÍµ?Î∞òÏ?Î¶?(km)    const dLat = (lat2 - lat1) * Math.PI / 180;    const dLon = (lon2 - lon1) * Math.PI / 180;    const a =       Math.sin(dLat/2) * Math.sin(dLat/2) +      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *       Math.sin(dLon/2) * Math.sin(dLon/2);    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));    return R * c;  };  // Í±∞Î¶¨ ?¨Îß∑??  const formatDistance = (dist: number): string => {    if (dist < 1) {      return `${Math.round(dist * 1000)}m`;    } else if (dist < 10) {      return `${dist.toFixed(1)}km`;    } else {      return `${Math.round(dist)}km`;    }  };  // ÏßÄ???¥Í∏∞  const openMap = () => {    if (!showMap) return;        // Ïπ¥Ïπ¥?§Îßµ ÎßÅÌÅ¨ ?ùÏÑ±    const kakaoMapUrl = `https://map.kakao.com/link/map/?ÅÌíà?ÑÏπò,${location.lat},${location.lng}`;        // Íµ¨Í?Îß?ÎßÅÌÅ¨ ?ùÏÑ± (Î∞±ÏóÖ)    const googleMapUrl = `https://www.google.com/maps?q=${location.lat},${location.lng}`;        // Ïπ¥Ïπ¥?§Îßµ ?∞ÏÑ†, ?§Ìå®??Íµ¨Í?Îß?    try {      window.open(kakaoMapUrl, '_blank');    } catch {      window.open(googleMapUrl, '_blank');    }  };  if (!distance && !location.placeName) {    return null;  }  return (    <div className="flex items-center gap-2 text-sm">      <MapPin className="w-4 h-4 text-gray-500" />            {distance !== null && (        <span className="text-gray-600 font-medium">          {formatDistance(distance)}        </span>      )}            {location.placeName && (        <span className="text-gray-500">          {location.placeName}        </span>      )}            {showMap && (        <button          onClick={openMap}          className="flex items-center gap-1 text-blue-600 hover:text-blue-700 transition-colors"          aria-label="ÏßÄ?ÑÏóê??Î≥¥Í∏∞"        >          <ExternalLink className="w-3 h-3" />          <span className="text-xs">ÏßÄ??/span>        </button>      )}    </div>  );}
