import React, { useState, useEffect, useRef, useCallback } from "react";import { collection, query, orderBy, limit, startAfter, getDocs, onSnapshot, doc, updateDoc, increment } from "firebase/firestore";import { db } from "@/lib/firebase";import { getFirstImageUrl } from "@/lib/images";import "./market.css";type Item = {  id: string;  title: string;  price: number;  images?: string[];  location: string;  distanceKm?: number;  createdAt: any;  likes: number;  status?: "active" | "reserved" | "sold";  sellerId: string;  geo?: { lat: number; lng: number; geohash: string };};export default function MarketLikeLayout() {  const [items, setItems] = useState<Item[]>([]);  const [loading, setLoading] = useState(true);  const [hasMore, setHasMore] = useState(true);  const [lastDoc, setLastDoc] = useState<any>(null);  const [likedItems, setLikedItems] = useState<Set<string>>(new Set());  const observerRef = useRef<HTMLDivElement>(null);  const ITEMS_PER_PAGE = 10;  // Firestore?êÏÑú ?ÅÌíà ?∞Ïù¥??Í∞Ä?∏Ïò§Í∏?  const fetchItems = useCallback(async (isInitial = false) => {    try {      setLoading(true);            let q = query(        collection(db, 'products'),        where('isDeleted', '!=', true),  // ???åÌîÑ????†ú???ÅÌíà ?úÏô∏        orderBy('createdAt', 'desc'),        limit(ITEMS_PER_PAGE)      );      if (!isInitial && lastDoc) {        q = query(q, startAfter(lastDoc));      }      const snapshot = await getDocs(q);      const newItems = snapshot.docs.map(doc => ({        id: doc.id,        ...doc.data()      })) as Item[];      if (isInitial) {        setItems(newItems);      } else {        setItems(prev => [...prev, ...newItems]);      }      setLastDoc(snapshot.docs[snapshot.docs.length - 1]);      setHasMore(snapshot.docs.length === ITEMS_PER_PAGE);    } catch (error) {      console.error('?ÅÌíà ?∞Ïù¥??Í∞Ä?∏Ïò§Í∏??§Ìå®:', error);    } finally {      setLoading(false);    }  }, [lastDoc]);  // Ï¥àÍ∏∞ ?∞Ïù¥??Î°úÎìú  useEffect(() => {    fetchItems(true);  }, []);  // Î¨¥Ìïú ?§ÌÅ¨Î°?Í¥ÄÏ∞∞Ïûê  useEffect(() => {    const observer = new IntersectionObserver(      (entries) => {        if (entries[0].isIntersecting && hasMore && !loading) {          fetchItems();        }      },      { threshold: 0.1 }    );    if (observerRef.current) {      observer.observe(observerRef.current);    }    return () => observer.disconnect();  }, [fetchItems, hasMore, loading]);  // Ï∞úÌïòÍ∏??†Í?  const toggleLike = async (itemId: string) => {    try {      const itemRef = doc(db, 'products', itemId);      const isLiked = likedItems.has(itemId);            if (isLiked) {        // Ï∞??¥Ï†ú        await updateDoc(itemRef, {          likes: increment(-1)        });        setLikedItems(prev => {          const newSet = new Set(prev);          newSet.delete(itemId);          return newSet;        });      } else {        // Ï∞úÌïòÍ∏?        await updateDoc(itemRef, {          likes: increment(1)        });        setLikedItems(prev => new Set(prev).add(itemId));      }      // Î°úÏª¨ ?ÅÌÉú ?ÖÎç∞?¥Ìä∏      setItems(prev => prev.map(item =>         item.id === itemId           ? { ...item, likes: isLiked ? item.likes - 1 : item.likes + 1 }          : item      ));    } catch (error) {      console.error('Ï∞úÌïòÍ∏??†Í? ?§Ìå®:', error);    }  };  // ?úÍ∞Ñ ?¨Îß∑??  const formatTimeAgo = (timestamp: any) => {    if (!timestamp) return '?úÍ∞Ñ ?ïÎ≥¥ ?ÜÏùå';        const now = new Date();    const created = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);    const diffMs = now.getTime() - created.getTime();    const diffMins = Math.floor(diffMs / (1000 * 60));    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));    if (diffMins < 1) return 'Î∞©Í∏à ??;    if (diffMins < 60) return `${diffMins}Î∂???;    if (diffHours < 24) return `${diffHours}?úÍ∞Ñ ??;    if (diffDays < 7) return `${diffDays}????;    return created.toLocaleDateString('ko-KR');  };  return (    <div className="market-page">      {/* ?ÅÎã® Í≥†Ï†ï ?§Îçî */}      <header className="topbar">        <button           className="loc"          onClick={() => {            console.log('?ìç ?ÑÏπò ?†ÌÉù Î≤ÑÌäº ?¥Î¶≠??);            // TODO: ?ÑÏπò ?†ÌÉù Î™®Îã¨ ?¥Í∏∞          }}        >          <span>?°ÏÇ∞2??/span>          <svg viewBox="0 0 24 24" className="icon" aria-hidden><path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>        </button>        <div className="top-actions">          <button             onClick={() => document.body.classList.toggle('theme-light')}            aria-label="?åÎßà ?ÑÌôò"             className="ghost theme-toggle"          >            <svg viewBox="0 0 24 24" className="icon">              <path d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" stroke="currentColor" strokeWidth="2" fill="none"/>            </svg>          </button>          <button             aria-label="QR/?§Ï∫î"             className="ghost"            onClick={() => {              console.log('?ì± QR/?§Ï∫î Î≤ÑÌäº ?¥Î¶≠??);              // TODO: QR ?§Ï∫î Í∏∞Îä• Íµ¨ÌòÑ            }}          >            <svg viewBox="0 0 24 24" className="icon"><path d="M4 7V4h3M20 7V4h-3M4 17v3h3M20 17v3h-3" stroke="currentColor" strokeWidth="2" fill="none"/></svg>          </button>          <button             aria-label="Î©îÎâ¥"             className="ghost"            onClick={() => {              console.log('??Î©îÎâ¥ Î≤ÑÌäº ?¥Î¶≠??);              // TODO: ?¨Ïù¥??Î©îÎâ¥ ?¥Í∏∞            }}          >            <svg viewBox="0 0 24 24" className="icon"><path d="M4 6h16M4 12h16M4 18h16" stroke="currentColor" strokeWidth="2" fill="none"/></svg>          </button>          <button             aria-label="Í≤Ä??             className="ghost"            onClick={() => {              console.log('?îç Í≤Ä??Î≤ÑÌäº ?¥Î¶≠??);              // TODO: Í≤Ä??Î™®Îã¨ ?¥Í∏∞            }}          >            <svg viewBox="0 0 24 24" className="icon"><circle cx="11" cy="11" r="7" stroke="currentColor" strokeWidth="2" fill="none"/><path d="M21 21l-3.5-3.5" stroke="currentColor" strokeWidth="2"/></svg>          </button>          <button             aria-label="?åÎ¶º"             className="ghost"            onClick={() => {              console.log('?îî ?åÎ¶º Î≤ÑÌäº ?¥Î¶≠??);              // TODO: ?åÎ¶º Î™©Î°ù ?¥Í∏∞            }}          >            <svg viewBox="0 0 24 24" className="icon"><path d="M6 8a6 6 0 1112 0v5l2 2H4l2-2V8" stroke="currentColor" strokeWidth="2" fill="none"/><path d="M9 19a3 3 0 006 0" stroke="currentColor" strokeWidth="2" fill="none"/></svg>          </button>        </div>      </header>      {/* Ïπ¥ÌÖåÍ≥†Î¶¨/?ÑÌÑ∞ Ïπ?*/}      <div className="chip-scroll">        {["Ï§ëÍ≥†Í±∞Îûò", "?åÎ∞î", "Ï§ëÍ≥†Ï∞?, "Î∂Ä?ôÏÇ∞", "?òÎàî", "?∏Í∏∞", "Í∞Ä??, "?òÎ•ò"].map((c) => (          <button             key={c}             className="chip"            onClick={() => {              console.log(`?è∑Ô∏?Ïπ¥ÌÖåÍ≥†Î¶¨ "${c}" ?†ÌÉù??);              // TODO: Ïπ¥ÌÖåÍ≥†Î¶¨Î≥??ÑÌÑ∞Îß?Íµ¨ÌòÑ            }}          >            {c}          </button>        ))}      </div>      {/* Î¶¨Ïä§??*/}      <main className="feed">        {items.map((it) => (          <article key={it.id} className="card" role="listitem">            <div className="thumb">              <img                 src={getFirstImageUrl(it)}                 alt={it.title}                 loading="lazy"               />              {it.status === "sold" && <span className="badge done">Í±∞Îûò?ÑÎ£å</span>}            </div>            <div className="meta">              <h2 className="title">{it.title}</h2>              <div className="meta-row">                <span className="sub">{it.location}</span>                {it.distanceKm && <span className="dot">??/span>}                {it.distanceKm && <span className="sub">{it.distanceKm}km</span>}                <span className="dot">??/span>                <span className="sub">{formatTimeAgo(it.createdAt)}</span>              </div>              <div className="price-like">                <strong className="price">{it.price.toLocaleString()}??/strong>                <button                   className={`like-btn ${likedItems.has(it.id) ? 'liked' : ''}`}                  onClick={() => toggleLike(it.id)}                  aria-label={likedItems.has(it.id) ? 'Ï∞??¥Ï†ú' : 'Ï∞úÌïòÍ∏?}                >                  <svg viewBox="0 0 24 24" className="icon-sm">                    <path                       d="M20.8 4.6a5.5 5.5 0 00-7.8 0L12 5.6l-1-1a5.5 5.5 0 10-7.8 7.8l1 1L12 22l7.8-7.6 1-1a5.5 5.5 0 000-7.8z"                       fill={likedItems.has(it.id) ? "currentColor" : "none"}                      stroke="currentColor"                      strokeWidth="2"                    />                  </svg>                  <span>{it.likes || 0}</span>                </button>              </div>            </div>            <button               className="menu ghost"               aria-label="Ïπ¥Îìú Î©îÎâ¥"              onClick={() => {                console.log(`??Ïπ¥Îìú Î©îÎâ¥ ?¥Î¶≠??- ?ÅÌíà: ${it.title}`);                // TODO: Ïπ¥ÎìúÎ≥?Î©îÎâ¥ (?†Í≥†, Í≥µÏú† ?? Íµ¨ÌòÑ              }}            >              <svg viewBox="0 0 24 24" className="icon"><circle cx="12" cy="6" r="1.5"/><circle cx="12" cy="12" r="1.5"/><circle cx="12" cy="18" r="1.5"/></svg>            </button>          </article>        ))}                {/* Î¨¥Ìïú ?§ÌÅ¨Î°?Í¥ÄÏ∞∞Ïûê */}        {hasMore && (          <div ref={observerRef} className="scroll-observer">            {loading ? (              <div className="loading-spinner">Î°úÎî© Ï§?..</div>            ) : (              <div className="scroll-hint">?§ÌÅ¨Î°§Ìïò????Î≥¥Í∏∞</div>            )}          </div>        )}      </main>      {/* ?åÎ°ú??Í∏Ä?∞Í∏∞ Î≤ÑÌäº */}      <button className="fab" aria-label="Í∏Ä?∞Í∏∞">        <svg viewBox="0 0 24 24" className="icon"><path d="M12 5v14M5 12h14" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg>        <span>Í∏Ä?∞Í∏∞</span>      </button>      {/* ?òÎã® ??*/}      <nav className="tabbar" aria-label="?òÎã® ??∞î">        {[          { label: "??, path: "#", svg: <path d="M3 11l9-7 9 7v9a2 2 0 01-2 2h-4a2 2 0 01-2-2V13H9v7a2 2 0 01-2 2H3z" /> },          { label: "?ôÎÑ§?ùÌôú", path: "#", svg: <path d="M4 6h16M4 12h16M4 18h16" /> },          { label: "?ôÎÑ§ÏßÄ??, path: "#", svg: <><path d="M12 2v4"/><path d="M12 22v-4"/><path d="M2 12h4"/><path d="M22 12h-4"/><circle cx="12" cy="12" r="4"/></> },          { label: "Ï±ÑÌåÖ", path: "#", svg: <><path d="M21 15a4 4 0 01-4 4H7l-4 3V7a4 4 0 014-4h10a4 4 0 014 4v8z" /></> },          { label: "?òÏùò ?πÍ∑º", path: "#", svg: <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2M12 11a4 4 0 100-8 4 4 0 000 8z" /> },        ].map((t) => (          <a key={t.label} href={t.path} className="tab">            <svg viewBox="0 0 24 24" className="icon" aria-hidden>{t.svg}</svg>            <span className="tab-label">{t.label}</span>          </a>        ))}      </nav>    </div>  );}
