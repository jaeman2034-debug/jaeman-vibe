import { createContext, useCallback, useContext, useRef, useState } from "react";
const ModalCtx = createContext(null);
export function useModal() { const ctx = useContext(ModalCtx); if (!ctx)
    throw new Error("useModal must be used within ModalProvider"); return ctx; }
export function ModalProvider({ registry, children }) { const [active, setActive] = useState(null); const lastRef = useRef(null); const open = useCallback((key, props) => { const now = Date.now(); if (lastRef.current && lastRef.current.key === key && now - lastRef.current.t < 200)
    return; }); } // ?�로?�    lastRef.current = { key, t: now };    setActive((prev) => (prev?.key === key ? prev : { key, props }));  }, []);  const close = useCallback(() => setActive(null), []);  // ESC ?�기  useEffect(() => {    const onKey = (e: KeyboardEvent) => { if (e.key === "Escape") close(); };    window.addEventListener("keydown", onKey);    return () => window.removeEventListener("keydown", onKey);  }, [close]);  // ?�크�??�금  useEffect(() => {    if (!active) return;    const prev = document.body.style.overflow;    document.body.style.overflow = "hidden";    return () => { document.body.style.overflow = prev; };  }, [active]);  // ?�털 ?��?준�?  const portalEl = useMemo(() => {    let el = document.getElementById("modal-root");    if (!el) {      el = document.createElement("div");      el.id = "modal-root";      document.body.appendChild(el);    }    return el;  }, []);  // 백드�?+ 컨텐�??�더  const node = useMemo(() => {    if (!active) return null;    const Comp = registry[active.key];    if (!Comp) return null;    return (      <div className="fixed inset-0 z-[2000]">        <div          className="absolute inset-0 bg-black/50"          onClick={close}          aria-label="BackDrop"        />        <div className="absolute inset-0 grid place-items-center p-4 pointer-events-none">          <div className="pointer-events-auto max-h-[90dvh] w-full max-w-[720px]">            {Comp({ ...(active.props || {}), onClose: close })}          </div>        </div>      </div>    );  }, [active, registry, close]);  return (    <ModalCtx.Provider value={{ open, close, active }}>      {children}      {portalEl ? createPortal(node, portalEl) : null}    </ModalCtx.Provider>  );} 
