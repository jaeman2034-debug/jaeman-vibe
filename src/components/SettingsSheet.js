import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { useSettings } from "../settings/SettingsContext";
import "./settings.css";
const VOICES_FALLBACK = [{ name: "?�동 ?�택", value: "auto" }];
export default function SettingsSheet() { const { locale, setLocale, autoFillWhileListening, setAutoFillWhileListening } = useSettings(); const [open, setOpen] = useState(false); const [voices, setVoices] = useState(VOICES_FALLBACK); useEffect(() => { if (!("speechSynthesis" in window))
    return; const load = () => { const list = window.speechSynthesis.getVoices(); const items = [{ name: "?�동 ?�택", value: "auto" }].concat(list.map(v => ({ name: `${v.name} (${v.lang})`, value: v.name }))); setVoices(items); }; load(); const id = setInterval(load, 300); setTimeout(() => clearInterval(id), 1500); }, []); return (_jsxs(_Fragment, { children: ["      ", "      ", _jsxs("button", { className: "gear-btn", onClick: () => setOpen(true), "aria-label": "?\uFFFD\uC815 ?\uFFFD\uAE30", children: ["??/button>      ", open && (_jsxs("div", { className: "sheet-backdrop", onClick: () => setOpen(false), children: ["          ", _jsxs("div", { className: "sheet", onClick: e => e.stopPropagation(), children: ["            ", _jsxs("div", { className: "sheet-header", children: ["              ", _jsx("h3", { children: "?\uFFFD\uC815" }), "              ", _jsx("button", { className: "icon", onClick: () => setOpen(false), children: "??/button>            " })] }), "            ", _jsxs("div", { className: "sheet-group", children: ["              ", _jsx("h4", { children: "?\uFFFD\uB799" }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("input", { type: "checkbox", checked: false, onChange: () => { } }), "                ", _jsx("span", { children: "?\uFFFD\uC131 \uBA85\uB839 ?\uFFFD\uC6A9" }), "              "] }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("input", { type: "checkbox", checked: false, onChange: () => { } }), "                ", _jsx("span", { children: "?\uFFFD\uC2A4??\uBA85\uB839 ?\uFFFD\uC6A9" }), "              "] }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("input", { type: "checkbox", checked: false, onChange: () => { } }), "                ", _jsx("span", { children: "??\uC9C4\uC785 ???\uFFFD\uB3D9 ?\uFFFD\uC791" }), "              "] }), "            "] }), "            ", _jsxs("div", { className: "sheet-group", children: ["              ", _jsx("h4", { children: "?\uFFFD\uC131 ?\uFFFD\uC2DD" }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("input", { type: "checkbox", checked: settings.autoFillWhileListening, onChange: e => update("autoFillWhileListening", e.target.checked) }), "                ", _jsx("span", { children: "?\uFFFD\uB294 \uFFFD??\uFFFD\uB3D9 \uCC44\uFFFD? (\uAD8C\uC7A5: ?\uFFFD\uAE30)" }), "              "] }), "              ", _jsx("p", { className: "hint", children: "?\uFFFD\uBA74 \"?\uFFFD\uC2F1?\uFFFD\uAE30\" \uBC84\uD2BC???\uFFFD\uB7EC???\uFFFD\uC774 \uCC44\uC6CC\uC9D1\uB2C8??" }), "            "] }), "            ", _jsxs("div", { className: "sheet-group", children: ["              ", _jsx("h4", { children: "?\uFFFD\uC5B4/?\uFFFD\uC131" }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("span", { children: "?\uFFFD\uC2DD ?\uFFFD\uC5B4" }), "                ", _jsxs("select", { value: locale, onChange: e => setLocale(e.target.value), children: ["                  ", _jsx("option", { value: "ko-KR", children: "?\uFFFD\uAD6D??(ko-KR)" }), "                  ", _jsx("option", { value: "en-US", children: "English (en-US)" }), "                  ", _jsx("option", { value: "ja-JP", children: "?\uFFFD\u672C\uFFFD?(ja-JP)" }), "                "] }), "              "] }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("span", { children: "TTS ?\uFFFD\uC131" }), "                ", _jsxs("select", { value: "auto", onChange: () => { }, children: ["                  ", voices.map(v => (_jsx("option", { value: v.value, children: v.name }, v.name + v.value))), "                "] }), "              "] }), "            "] }), "            ", _jsxs("div", { className: "sheet-group", children: ["              ", _jsx("h4", { children: "NLU (OpenAI)" }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("span", { children: "\uBAA8\uB378" }), "                ", _jsxs("select", { value: "gpt-4o-mini", onChange: () => { }, children: ["                  ", _jsx("option", { value: "gpt-4o-mini", children: "gpt-4o-mini (\uAD8C\uC7A5/?\uFFFD\uBE44\uC6A9)" }), "                  ", _jsx("option", { value: "gpt-4o", children: "gpt-4o" }), "                  ", _jsx("option", { value: "gpt-3.5", children: "gpt-3.5" }), "                "] }), "              "] }), "              ", _jsxs("label", { className: "row", children: ["                ", _jsx("span", { children: "Temperature" }), "                ", _jsx("input", { type: "range", min: 0, max: 1, step: 0.05, value: 0.4, onChange: () => { } }), "                ", _jsx("span", { className: "mono", children: "0.40" }), "              "] }), "              ", _jsxs("p", { className: "hint", children: ["API Key??.env??", _jsx("code", { children: "VITE_OPENAI_API_KEY" }), " \uFFFD??\uFFFD\uC6A9?\uFFFD\uB2C8??"] }), "            "] }), "            ", _jsxs("div", { className: "sheet-footer", children: ["              ", _jsx("button", { className: "ghost", onClick: () => setOpen(false), children: "?\uFFFD\uAE30" }), "            "] }), "          "] }), "        "] })), "    "] }), "  );}"] })); }
