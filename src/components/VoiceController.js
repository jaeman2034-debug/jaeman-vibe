import { useEffect, useRef, useState } from 'react';
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; /** ?�성 ???�스?? 간단??명령 ?�서 ?�함 */
export default function VoiceController({ onIntent, tts = true }) { const [active, setActive] = useState(false); const [lastTranscript, setLastTranscript] = useState(''); const [showSettings, setShowSettings] = useState(false); const [ttsVolume, setTtsVolume] = useState(1.0); const [ttsRate, setTtsRate] = useState(1.0); const recRef = useRef(null); const speak = (text) => { if (!tts)
    return; const u = new SpeechSynthesisUtterance(text); u.lang = 'ko-KR'; u.volume = ttsVolume; u.rate = ttsRate; window.speechSynthesis.speak(u); }; useEffect(() => { if (!SpeechRecognition) {
    console.warn('[VOICE] SpeechRecognition??지?�하지 ?�는 브라?��??�니??');
    return;
} }); } // 마이??권한 ?�인    if (navigator.permissions) {      navigator.permissions.query({ name: 'microphone' as PermissionName }).then((result) => {        if (result.state === 'denied') {          console.warn('[VOICE] 마이??권한??거�??�었?�니??');        }        result.onchange = () => {          console.log('[VOICE] 마이??권한 ?�태 변�?', result.state);        };      });    }    const rec = new SpeechRecognition();    rec.lang = 'ko-KR';    rec.interimResults = false;    rec.maxAlternatives = 1;    rec.onresult = (e: any) => {      const transcript = e.results[0][0].transcript.trim();      setLastTranscript(transcript);      const intent = parseIntent(transcript);      if (intent) {        onIntent(intent);        feedback(intent);      } else {        speak(`죄송?�요. ?�해?��? 못했?�요: ${transcript}`);      }    };    rec.onerror = (e: any) => {      console.error('[VOICE] ?�성 ?�식 ?�류:', e.error);      if (e.error === 'not-allowed') {        speak('마이??권한???�요?�니?? 브라?��? ?�정?�서 마이?��? ?�용?�주?�요.');      }      setActive(false);    };    rec.onend = () => setActive(false);    recRef.current = rec;  }, [onIntent]);  const feedback = (intent: Intent) => {    switch (intent.type) {      case 'OPEN_CREATE': speak('?�품 ?�록 ?�면???�게??'); break;      case 'FILTER_NEARBY': speak(`${intent.km}?�로 ?�내�??�터링했?�요.`); break;      case 'FILTER_PRICE_MAX': speak(`최�? ${intent.max}?�으�??�한?�어??`); break;      case 'OPEN_DETAIL': speak(`${intent.index}�??�세�??�게??`); break;      case 'ANALYZE_CURRENT': speak('AI 분석???�작?�게??'); break;      case 'NEXT_PAGE': speak('?�음?�로 ?�동?�니??'); break;      case 'PREV_PAGE': speak('?�전?�로 ?�동?�니??'); break;      case 'SEARCH': speak(`${intent.query}�?검?�했?�요.`); break;      case 'FILTER_CATEGORY': speak(`${intent.category} 카테고리�??�터링했?�요.`); break;      case 'SORT_BY': speak(`${intent.field === 'price' ? '가�? : intent.field === 'distance' ? '거리' : '?�짜'}?�으�??�렬?�어??`); break;      case 'TOGGLE_FAVORITE': speak(`${intent.index}�??�품??즐겨찾기??추�??�어??`); break;      case 'SHOW_FAVORITES': speak('즐겨찾기 목록??보여?�릴게요.'); break;      case 'CLEAR_FILTERS': speak('모든 ?�터�??�제?�어??'); break;      case 'HELP': speak('?�성 명령 ?��?말을 보여?�릴게요.'); break;    }  };  const onToggle = () => {    if (!recRef.current) return;    if (active) {      recRef.current.stop();      setActive(false);    } else {      recRef.current.start();      setActive(true);      speak('?�고 ?�어??');    }  };  return (    <div className="fixed right-4 bottom-5 z-40">      {/* 메인 마이??버튼 */}      <button        onClick={onToggle}        className={`rounded-full shadow-lg px-6 py-5 text-white transition text-lg ${          active ? 'bg-red-500 animate-pulse' : 'bg-indigo-600 hover:bg-indigo-700'        }`}        aria-pressed={active}        aria-label="?�성 ?�어"      >        ?���?{active ? '?�기' : '말하�?}      </button>      {/* ?�정 버튼 */}      <button        onClick={() => setShowSettings(!showSettings)}        className="mt-3 w-full rounded-full shadow-lg px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm transition"        aria-label="TTS ?�정"      >        ?�️ ?�정      </button>      {/* TTS ?�정 ?�널 */}      {showSettings && (        <div className="mt-3 p-4 bg-white rounded-lg shadow-lg border min-w-[280px]">          <h3 className="text-sm font-medium text-gray-700 mb-3">TTS ?�정</h3>                    <div className="space-y-3">            <div>              <label className="text-xs text-gray-600">볼륨</label>              <input                type="range"                min="0"                max="1"                step="0.1"                value={ttsVolume}                onChange={(e) => setTtsVolume(Number(e.target.value))}                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"              />              <span className="text-xs text-gray-500">{Math.round(ttsVolume * 100)}%</span>            </div>                        <div>              <label className="text-xs text-gray-600">?�도</label>              <input                type="range"                min="0.5"                max="2"                step="0.1"                value={ttsRate}                onChange={(e) => setTtsRate(Number(e.target.value))}                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"              />              <span className="text-xs text-gray-500">{ttsRate}x</span>            </div>          </div>          <button            onClick={() => speak('?�정???�?�되?�습?�다.')}            className="mt-3 w-full text-xs px-3 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition"          >            ?�스??          </button>        </div>      )}      {/* ?�성 ?�식 결과 */}      {lastTranscript && (        <div className="mt-2 text-xs text-gray-600 bg-white/80 backdrop-blur rounded px-2 py-1 shadow">          "{lastTranscript}"        </div>      )}    </div>  );}/** ?��? 명령 간단 ?�서 */function parseIntent(t: string): Intent | null {  const s = t.replace(/\s+/g, '');  // 기본 명령  if (s.includes('?�품?�록')) return { type: 'OPEN_CREATE' };  if (s.includes('?�음')) return { type: 'NEXT_PAGE' };  if (s.includes('?�전')) return { type: 'PREV_PAGE' };  if (s.includes('분석')) return { type: 'ANALYZE_CURRENT' };  if (s.includes('?��?�?) || s.includes('help')) return { type: 'HELP' };  if (s.includes('즐겨찾기') || s.includes('관?�상??)) return { type: 'SHOW_FAVORITES' };  if (s.includes('?�터?�제') || s.includes('초기??)) return { type: 'CLEAR_FILTERS' };  // 거리 ?�터  const mKm = s.match(/(\d+)\s*??�?);  if (mKm) return { type: 'FILTER_NEARBY', km: Number(mKm[1]) };  // 가�??�터  const mWon = s.match(/(\d+)\s*(??만원)/);  if (mWon && s.includes('?�하')) {    const num = Number(mWon[1]) * (s.includes('만원') ? 10000 : 1);    return { type: 'FILTER_PRICE_MAX', max: num };  }  // ?�세 보기  const mDetail = s.match(/(\d+)\s*�??�세|?�어�?보기)/);  if (mDetail) return { type: 'OPEN_DETAIL', index: Number(mDetail[1]) };  // 카테고리 ?�터  const categories = ['축구', '?�구', '?�구', '?�니??, '가�?, '?�동??, '?�류', '?�자'];  for (const category of categories) {    if (s.includes(category)) {      return { type: 'FILTER_CATEGORY', category };    }  }  // ?�렬  if (s.includes('가격순') || s.includes('가격순??)) return { type: 'SORT_BY', field: 'price' };  if (s.includes('거리??) || s.includes('가까운??)) return { type: 'SORT_BY', field: 'distance' };  if (s.includes('최신??) || s.includes('?�짜??)) return { type: 'SORT_BY', field: 'date' };  // 즐겨찾기  const mFavorite = s.match(/(\d+)\s*�?즐겨찾기|관??�?/);  if (mFavorite) return { type: 'TOGGLE_FAVORITE', index: Number(mFavorite[1]) };  // 검??(기본)  if (t.length >= 2) return { type: 'SEARCH', query: t };  return null;}
