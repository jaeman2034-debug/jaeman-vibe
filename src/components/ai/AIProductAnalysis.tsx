import React, { useState, useRef, useCallback } from 'react';import Camera from 'lucide-react/dist/esm/icons/camera';import Upload from 'lucide-react/dist/esm/icons/upload';import X from 'lucide-react/dist/esm/icons/x';import RefreshCw from 'lucide-react/dist/esm/icons/refresh-cw';import CheckCircle from 'lucide-react/dist/esm/icons/check-circle';import AlertCircle from 'lucide-react/dist/esm/icons/alert-circle';import RotateCcw from 'lucide-react/dist/esm/icons/rotate-ccw';import { useAIFeatures, type AIAnalysisResult } from '../../hooks/useAIFeatures';import { validateImageFile, getErrorMessage } from '../../services/aiService';interface AIProductAnalysisProps {  onAnalysisComplete?: (result: AIAnalysisResult) => void;  onClose?: () => void;  className?: string;}export const AIProductAnalysis: React.FC<AIProductAnalysisProps> = ({  onAnalysisComplete,  onClose,  className = ''}) => {  const fileInputRef = useRef<HTMLInputElement>(null);  const [selectedImage, setSelectedImage] = useState<File | null>(null);  const [imagePreview, setImagePreview] = useState<string>('');  const [customPrompt, setCustomPrompt] = useState('');  const [dragActive, setDragActive] = useState(false);    const {    isAnalyzing,    lastAnalysis,    lastError,    analysisStatus,    analysisProgress,    analyzeProductImage,    clearAnalysis,    retryAnalysis,    hasAnalysis,    hasError,    canRetry,    progressPercentage  } = useAIFeatures();  // ?¥Î?ÏßÄ ?†ÌÉù Ï≤òÎ¶¨  const handleImageSelect = useCallback((file: File) => {    // ?åÏùº ?†Ìö®??Í≤Ä??    const validation = validateImageFile(file);    if (!validation.valid) {      const errorMessage = getErrorMessage(validation.error || 'invalid-file');      alert(errorMessage);      return;    }    setSelectedImage(file);        // ÎØ∏Î¶¨Î≥¥Í∏∞ ?ùÏÑ±    const reader = new FileReader();    reader.onload = (e) => {      setImagePreview(e.target?.result as string);    };    reader.readAsDataURL(file);        // ?¥Ï†Ñ Î∂ÑÏÑù Í≤∞Í≥º Ï¥àÍ∏∞??    clearAnalysis();  }, [clearAnalysis]);  // ?åÏùº ?úÎ°≠ Ï≤òÎ¶¨  const handleDrop = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(false);        const files = Array.from(e.dataTransfer.files);    if (files.length > 0) {      handleImageSelect(files[0]);    }  }, [handleImageSelect]);  // ?úÎûòÍ∑??§Î≤Ñ Ï≤òÎ¶¨  const handleDragOver = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(true);  }, []);  // ?úÎûòÍ∑?Î¶¨Î∏å Ï≤òÎ¶¨  const handleDragLeave = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(false);  }, []);  // ?¥Î?ÏßÄ Î∂ÑÏÑù ?úÏûë  const startAnalysis = useCallback(async () => {    if (!selectedImage) return;    try {      const result = await analyzeProductImage(selectedImage, customPrompt);      if (result && onAnalysisComplete) {        onAnalysisComplete(result);      }    } catch (error) {      console.error('?¥Î?ÏßÄ Î∂ÑÏÑù ?§Ìå®:', error);    }  }, [selectedImage, customPrompt, analyzeProductImage, onAnalysisComplete]);  // ???¥Î?ÏßÄÎ°??¨Ïãú??  const resetAnalysis = useCallback(() => {    setSelectedImage(null);    setImagePreview('');    setCustomPrompt('');    clearAnalysis();  }, [clearAnalysis]);  // ?¥Î?ÏßÄ ?úÍ±∞  const removeImage = useCallback(() => {    setSelectedImage(null);    setImagePreview('');    clearAnalysis();  }, [clearAnalysis]);  // ?¨Ïãú??  const handleRetry = useCallback(async () => {    if (canRetry) {      await retryAnalysis();    }  }, [canRetry, retryAnalysis]);  return (    <div className={`bg-white rounded-lg shadow-lg p-6 max-w-2xl mx-auto ${className}`}>      {/* ?§Îçî */}      <div className="flex items-center justify-between mb-6">        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">          <Camera className="w-6 h-6 text-blue-600" />          AI ?ÅÌíà Î∂ÑÏÑù        </h2>        {onClose && (          <button            onClick={onClose}            className="p-2 hover:bg-gray-100 rounded-full transition-colors"          >            <X className="w-5 h-5 text-gray-500" />          </button>        )}      </div>      {/* ?¥Î?ÏßÄ ?ÖÎ°ú???ÅÏó≠ */}      {!selectedImage ? (        <div          className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${            dragActive               ? 'border-blue-400 bg-blue-50'               : 'border-gray-300 hover:border-blue-400'          }`}          onClick={() => fileInputRef.current?.click()}          onDrop={handleDrop}          onDragOver={handleDragOver}          onDragLeave={handleDragLeave}        >          <Upload className={`w-12 h-12 mx-auto mb-4 transition-colors ${            dragActive ? 'text-blue-600' : 'text-gray-400'          }`} />          <p className="text-lg text-gray-600 mb-2">            {dragActive ? '?¨Í∏∞???¥Î?ÏßÄÎ•??ìÏúº?∏Ïöî' : '?¥Î?ÏßÄÎ•??úÎûòÍ∑∏ÌïòÍ±∞ÎÇò ?¥Î¶≠?òÏó¨ ?ÖÎ°ú??}          </p>          <p className="text-sm text-gray-500">            JPG, PNG, WebP (ÏµúÎ? 10MB)          </p>          <input            ref={fileInputRef}            type="file"            accept="image/*"            onChange={(e) => {              const file = e.target.files?.[0];              if (file) handleImageSelect(file);            }}            className="hidden"          />        </div>      ) : (        /* ?¥Î?ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ Î∞?Î∂ÑÏÑù */        <div className="space-y-4">          {/* ?¥Î?ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ */}          <div className="relative">            <img              src={imagePreview}              alt="?ÅÌíà ?¥Î?ÏßÄ"              className="w-full h-64 object-cover rounded-lg"            />            <button              onClick={removeImage}              className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"            >              <X className="w-4 h-4" />            </button>          </div>          {/* Ïª§Ïä§?Ä ?ÑÎ°¨?ÑÌä∏ */}          <div>            <label className="block text-sm font-medium text-gray-700 mb-2">              Î∂ÑÏÑù ÏßÄ?úÏÇ¨??(?†ÌÉù?¨Ìï≠)            </label>            <textarea              value={customPrompt}              onChange={(e) => setCustomPrompt(e.target.value)}              placeholder="?? ??Ï∂ïÍµ¨?îÏùò Î∏åÎûú?úÏ? ?ÅÌÉúÎ•??êÏÑ∏??Î∂ÑÏÑù?¥Ï£º?∏Ïöî"              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"              rows={2}            />          </div>          {/* Î∂ÑÏÑù ÏßÑÌñâÎ•?*/}          {isAnalyzing && (            <div className="space-y-2">              <div className="flex items-center justify-between text-sm text-gray-600">                <span>AI Î∂ÑÏÑù Ï§?..</span>                <span>{progressPercentage}%</span>              </div>              <div className="w-full bg-gray-200 rounded-full h-2">                <div                   className="bg-blue-600 h-2 rounded-full transition-all duration-300"                  style={{ width: `${progressPercentage}%` }}                ></div>              </div>            </div>          )}          {/* Î∂ÑÏÑù Î≤ÑÌäº */}          <button            onClick={startAnalysis}            disabled={isAnalyzing}            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2"          >            {isAnalyzing ? (              <>                <RefreshCw className="w-5 h-5 animate-spin" />                AI Î∂ÑÏÑù Ï§?.. ({progressPercentage}%)              </>            ) : (              <>                <Camera className="w-5 h-5" />                AIÎ°??ÅÌíà Î∂ÑÏÑù?òÍ∏∞              </>            )}          </button>        </div>      )}      {/* Î∂ÑÏÑù Í≤∞Í≥º */}      {hasAnalysis && lastAnalysis && (        <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">          <div className="flex items-center gap-2 mb-4">            <CheckCircle className="w-5 h-5 text-green-600" />            <h3 className="text-lg font-semibold text-green-800">AI Î∂ÑÏÑù ?ÑÎ£å</h3>          </div>                    <div className="space-y-3">            {/* Ïπ¥ÌÖåÍ≥†Î¶¨ */}            <div>              <span className="text-sm font-medium text-gray-600">Ïπ¥ÌÖåÍ≥†Î¶¨:</span>              <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm">                {lastAnalysis.category || 'Í∏∞Ì?'}              </span>            </div>            {/* ?úÍ∑∏ */}            <div>              <span className="text-sm font-medium text-gray-600">?úÍ∑∏:</span>              <div className="flex flex-wrap gap-1 mt-1">                {lastAnalysis.tags && lastAnalysis.tags.length > 0 ? (                  lastAnalysis.tags.map((tag, index) => (                    <span                      key={index}                      className="px-2 py-1 bg-gray-100 text-gray-700 rounded text-sm"                    >                      {tag}                    </span>                  ))                ) : (                  <span className="text-gray-500 text-sm">?úÍ∑∏ ?ÜÏùå</span>                )}              </div>            </div>            {/* ?çÏÑ± */}            <div>              <span className="text-sm font-medium text-gray-600">?çÏÑ±:</span>              <div className="grid grid-cols-2 gap-2 mt-1">                {lastAnalysis.attributes && Object.entries(lastAnalysis.attributes).map(([key, value]) => (                  <div key={key} className="text-sm">                    <span className="text-gray-500">{key}:</span>                    <span className="ml-1 text-gray-700">                      {value || '?????ÜÏùå'}                    </span>                  </div>                ))}              </div>            </div>            {/* ?îÏïΩ */}            <div>              <span className="text-sm font-medium text-gray-600">?îÏïΩ:</span>              <p className="mt-1 text-gray-700">{lastAnalysis.summary || '?îÏïΩ ?ÜÏùå'}</p>            </div>          </div>          {/* ?°ÏÖò Î≤ÑÌäº??*/}          <div className="flex gap-2 mt-4">            <button              onClick={resetAnalysis}              className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm"            >              ???¥Î?ÏßÄÎ°??§Ïãú Î∂ÑÏÑù            </button>            {canRetry && (              <button                onClick={handleRetry}                className="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors text-sm flex items-center gap-1"              >                <RotateCcw className="w-4 h-4" />                ?¨Ïãú??              </button>            )}          </div>        </div>      )}      {/* ?êÎü¨ ?úÏãú */}      {hasError && lastError && (        <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">          <div className="flex items-center gap-2 mb-2">            <AlertCircle className="w-5 h-5 text-red-600" />            <h3 className="text-lg font-semibold text-red-800">Î∂ÑÏÑù ?§Ìå®</h3>          </div>          <p className="text-red-700">{lastError.message}</p>          <div className="flex gap-2 mt-3">            <button              onClick={() => clearAnalysis()}              className="px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm"            >              ?´Í∏∞            </button>            {canRetry && (              <button                onClick={handleRetry}                className="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors text-sm flex items-center gap-1"              >                <RotateCcw className="w-4 h-4" />                ?¨Ïãú??              </button>            )}          </div>        </div>      )}    </div>  );}; 