import React, { useState, useRef, useCallback } from 'react';import Upload from 'lucide-react/dist/esm/icons/upload';import X from 'lucide-react/dist/esm/icons/x';import CheckCircle from 'lucide-react/dist/esm/icons/check-circle';import AlertCircle from 'lucide-react/dist/esm/icons/alert-circle';import RotateCcw from 'lucide-react/dist/esm/icons/rotate-ccw';import ImageIcon from 'lucide-react/dist/esm/icons/image';import { useAIFeatures, type AIAnalysisResult } from '../../hooks/useAIFeatures';import { validateImageFile, getErrorMessage } from '../../services/aiService';interface MultiImageUploadProps {  onAnalysisComplete?: (results: AIAnalysisResult[]) => void;  onClose?: () => void;  maxFiles?: number;  className?: string;}export const MultiImageUpload: React.FC<MultiImageUploadProps> = ({  onAnalysisComplete,  onClose,  maxFiles = 5,  className = ''}) => {  const fileInputRef = useRef<HTMLInputElement>(null);  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);  const [dragActive, setDragActive] = useState(false);  const [customPrompt, setCustomPrompt] = useState('');    const {    isAnalyzing,    lastAnalysis,    lastError,    analysisProgress,    analyzeMultipleImages,    clearAnalysis,    retryAnalysis,    hasAnalysis,    hasError,    canRetry,    progressPercentage  } = useAIFeatures();  // ?åÏùº ?†ÌÉù Ï≤òÎ¶¨  const handleFileSelect = useCallback((files: FileList) => {    const newFiles = Array.from(files);    const validFiles: File[] = [];    const errors: string[] = [];    newFiles.forEach(file => {      const validation = validateImageFile(file);      if (validation.valid) {        validFiles.push(file);      } else {        errors.push(`${file.name}: ${getErrorMessage(validation.error || 'invalid-file')}`);      }    });    if (errors.length > 0) {      alert(`?§Ïùå ?åÏùº?§ÏùÑ ?ÖÎ°ú?úÌï† ???ÜÏäµ?àÎã§:\n${errors.join('\n')}`);    }    if (validFiles.length > 0) {      const totalFiles = selectedFiles.length + validFiles.length;      if (totalFiles > maxFiles) {        const allowed = maxFiles - selectedFiles.length;        alert(`ÏµúÎ? ${maxFiles}Í∞úÍπåÏßÄÎß??ÖÎ°ú?úÌï† ???àÏäµ?àÎã§. ${allowed}Í∞úÎßå Ï∂îÍ??©Îãà??`);        setSelectedFiles(prev => [...prev, ...validFiles.slice(0, allowed)]);      } else {        setSelectedFiles(prev => [...prev, ...validFiles]);      }    }    clearAnalysis();  }, [selectedFiles, maxFiles, clearAnalysis]);  // ?åÏùº ?úÍ±∞  const removeFile = useCallback((index: number) => {    setSelectedFiles(prev => prev.filter((_, i) => i !== index));    clearAnalysis();  }, [clearAnalysis]);  // Î™®Îì† ?åÏùº ?úÍ±∞  const clearAllFiles = useCallback(() => {    setSelectedFiles([]);    clearAnalysis();  }, [clearAnalysis]);  // ?åÏùº ?úÎ°≠ Ï≤òÎ¶¨  const handleDrop = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(false);        const files = e.dataTransfer.files;    if (files.length > 0) {      handleFileSelect(files);    }  }, [handleFileSelect]);  // ?úÎûòÍ∑??§Î≤Ñ Ï≤òÎ¶¨  const handleDragOver = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(true);  }, []);  // ?úÎûòÍ∑?Î¶¨Î∏å Ï≤òÎ¶¨  const handleDragLeave = useCallback((e: React.DragEvent) => {    e.preventDefault();    setDragActive(false);  }, []);  // ?§Ï§ë ?¥Î?ÏßÄ Î∂ÑÏÑù ?úÏûë  const startAnalysis = useCallback(async () => {    if (selectedFiles.length === 0) return;    try {      const results = await analyzeMultipleImages(selectedFiles, customPrompt);      if (results.length > 0 && onAnalysisComplete) {        onAnalysisComplete(results);      }    } catch (error) {      console.error('?§Ï§ë ?¥Î?ÏßÄ Î∂ÑÏÑù ?§Ìå®:', error);    }  }, [selectedFiles, customPrompt, analyzeMultipleImages, onAnalysisComplete]);  // ?¨Ïãú??  const handleRetry = useCallback(async () => {    if (canRetry && selectedFiles.length > 0) {      await analyzeMultipleImages(selectedFiles, customPrompt);    }  }, [canRetry, selectedFiles, customPrompt, analyzeMultipleImages]);  return (    <div className={`bg-white rounded-lg shadow-lg p-6 max-w-4xl mx-auto ${className}`}>      {/* ?§Îçî */}      <div className="flex items-center justify-between mb-6">        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">          <ImageIcon className="w-6 h-6 text-blue-600" />          ?§Ï§ë ?¥Î?ÏßÄ AI Î∂ÑÏÑù        </h2>        {onClose && (          <button            onClick={onClose}            className="p-2 hover:bg-gray-100 rounded-full transition-colors"          >            <X className="w-5 h-5 text-gray-500" />          </button>        )}      </div>      {/* ?åÏùº ?ÖÎ°ú???ÅÏó≠ */}      {selectedFiles.length === 0 ? (        <div          className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${            dragActive               ? 'border-blue-400 bg-blue-50'               : 'border-gray-300 hover:border-blue-400'          }`}          onClick={() => fileInputRef.current?.click()}          onDrop={handleDrop}          onDragOver={handleDragOver}          onDragLeave={handleDragLeave}        >          <Upload className={`w-12 h-12 mx-auto mb-4 transition-colors ${            dragActive ? 'text-blue-600' : 'text-gray-400'          }`} />          <p className="text-lg text-gray-600 mb-2">            {dragActive ? '?¨Í∏∞???¥Î?ÏßÄÎ•??ìÏúº?∏Ïöî' : '?¥Î?ÏßÄÎ•??úÎûòÍ∑∏ÌïòÍ±∞ÎÇò ?¥Î¶≠?òÏó¨ ?ÖÎ°ú??}          </p>          <p className="text-sm text-gray-500">            JPG, PNG, WebP (ÏµúÎ? 10MB, ÏµúÎ? {maxFiles}Í∞?          </p>          <input            ref={fileInputRef}            type="file"            accept="image/*"            multiple            onChange={(e) => {              if (e.target.files) {                handleFileSelect(e.target.files);              }            }}            className="hidden"          />        </div>      ) : (        /* ?†ÌÉù???åÏùº Î™©Î°ù Î∞?Î∂ÑÏÑù */        <div className="space-y-4">          {/* ?åÏùº Î™©Î°ù */}          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">            {selectedFiles.map((file, index) => (              <div key={index} className="relative bg-gray-50 rounded-lg p-3 border">                <div className="flex items-center gap-2 mb-2">                  <ImageIcon className="w-4 h-4 text-gray-500" />                  <span className="text-sm font-medium text-gray-700 truncate">                    {file.name}                  </span>                  <button                    onClick={() => removeFile(index)}                    className="ml-auto p-1 hover:bg-red-100 rounded-full transition-colors"                  >                    <X className="w-3 h-3 text-red-500" />                  </button>                </div>                                <div className="text-xs text-gray-500">                  {(file.size / 1024 / 1024).toFixed(2)} MB                </div>                                <div className="text-xs text-gray-500">                  {file.type.split('/')[1].toUpperCase()}                </div>              </div>            ))}          </div>          {/* ?åÏùº Í¥ÄÎ¶?Î≤ÑÌäº */}          <div className="flex gap-2">            <button              onClick={() => fileInputRef.current?.click()}              className="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors text-sm"            >              ??Ï∂îÍ??òÍ∏∞            </button>            <button              onClick={clearAllFiles}              className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm"            >              Î™®Îëê ÏßÄ?∞Í∏∞            </button>          </div>          {/* Ïª§Ïä§?Ä ?ÑÎ°¨?ÑÌä∏ */}          <div>            <label className="block text-sm font-medium text-gray-700 mb-2">              Î∂ÑÏÑù ÏßÄ?úÏÇ¨??(?†ÌÉù?¨Ìï≠)            </label>            <textarea              value={customPrompt}              onChange={(e) => setCustomPrompt(e.target.value)}              placeholder="?? ???§Ìè¨Ï∏†Ïö©?àÎì§??Í≥µÌÜµ ?πÏßïÍ≥?Ï∞®Ïù¥?êÏùÑ Î∂ÑÏÑù?¥Ï£º?∏Ïöî"              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"              rows={2}            />          </div>          {/* Î∂ÑÏÑù ÏßÑÌñâÎ•?*/}          {isAnalyzing && (            <div className="space-y-2">              <div className="flex items-center justify-between text-sm text-gray-600">                <span>AI Î∂ÑÏÑù Ï§?.. ({selectedFiles.length}Í∞??¥Î?ÏßÄ)</span>                <span>{progressPercentage}%</span>              </div>              <div className="w-full bg-gray-200 rounded-full h-2">                <div                   className="bg-blue-600 h-2 rounded-full transition-all duration-300"                  style={{ width: `${progressPercentage}%` }}                ></div>              </div>            </div>          )}          {/* Î∂ÑÏÑù Î≤ÑÌäº */}          <button            onClick={startAnalysis}            disabled={isAnalyzing}            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2"          >            {isAnalyzing ? (              <>                <RotateCcw className="w-5 h-5 animate-spin" />                AI Î∂ÑÏÑù Ï§?.. ({progressPercentage}%)              </>            ) : (              <>                <ImageIcon className="w-5 h-5" />                {selectedFiles.length}Í∞??¥Î?ÏßÄ AI Î∂ÑÏÑù?òÍ∏∞              </>            )}          </button>        </div>      )}      {/* Î∂ÑÏÑù Í≤∞Í≥º ?îÏïΩ */}      {hasAnalysis && lastAnalysis && (        <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">          <div className="flex items-center gap-2 mb-4">            <CheckCircle className="w-5 h-5 text-green-600" />            <h3 className="text-lg font-semibold text-green-800">              ?§Ï§ë ?¥Î?ÏßÄ Î∂ÑÏÑù ?ÑÎ£å            </h3>          </div>                    <div className="text-sm text-gray-700 mb-3">            {selectedFiles.length}Í∞??¥Î?ÏßÄ???Ä??AI Î∂ÑÏÑù???ÑÎ£å?òÏóà?µÎãà??          </div>          {/* Ï≤?Î≤àÏß∏ Í≤∞Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞ */}          <div className="bg-white rounded p-3 mb-3">            <h4 className="font-medium text-gray-900 mb-2">Ï≤?Î≤àÏß∏ ?¥Î?ÏßÄ Î∂ÑÏÑù Í≤∞Í≥º</h4>            <div className="space-y-2 text-sm">              <div>                <span className="text-gray-600">Ïπ¥ÌÖåÍ≥†Î¶¨:</span>                <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">                  {lastAnalysis.category || 'Í∏∞Ì?'}                </span>              </div>              <div>                <span className="text-gray-600">?îÏïΩ:</span>                <span className="ml-2 text-gray-700">                  {lastAnalysis.summary || '?îÏïΩ ?ÜÏùå'}                </span>              </div>            </div>          </div>          {/* ?°ÏÖò Î≤ÑÌäº??*/}          <div className="flex gap-2">            <button              onClick={clearAllFiles}              className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors text-sm"            >              ???¥Î?ÏßÄÎ°??§Ïãú Î∂ÑÏÑù            </button>            {canRetry && (              <button                onClick={handleRetry}                className="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors text-sm flex items-center gap-1"              >                <RotateCcw className="w-4 h-4" />                ?¨Ïãú??              </button>            )}          </div>        </div>      )}      {/* ?êÎü¨ ?úÏãú */}      {hasError && lastError && (        <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">          <div className="flex items-center gap-2 mb-2">            <AlertCircle className="w-5 h-5 text-red-600" />            <h3 className="text-lg font-semibold text-red-800">Î∂ÑÏÑù ?§Ìå®</h3>          </div>          <p className="text-red-700">{lastError.message}</p>          <div className="flex gap-2 mt-3">            <button              onClick={() => clearAnalysis()}              className="px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm"            >              ?´Í∏∞            </button>            {canRetry && (              <button                onClick={handleRetry}                className="px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors text-sm flex items-center gap-1"              >                <RotateCcw className="w-4 h-4" />                ?¨Ïãú??              </button>            )}          </div>        </div>      )}    </div>  );}; 
