"use strict";
// src/components/location/LocationBadge.tsximport React from 'react';import { haversineKm, formatDistance } from '@/lib/distance';import { useLocationStore, isLocationValid } from '@/stores/locationStore';interface LocationBadgeProps {  itemLocation?: {    lat: number;    lng: number;    accuracy?: number;  };  regionDong?: string;  regionSigungu?: string;  regionFull?: string;  showDistance?: boolean;  className?: string;  size?: 'sm' | 'md' | 'lg';}export function LocationBadge({  itemLocation,  regionDong,  regionSigungu,  regionFull,  showDistance = true,  className = '',  size = 'md'}: LocationBadgeProps) {  const { userLoc } = useLocationStore();  const hasValidUserLocation = isLocationValid(userLoc);  const hasItemLocation = itemLocation?.lat && itemLocation?.lng;  // 거리 ?�는 ?�정???�시 결정  let displayText = '?�치 미설??;  let badgeType: 'distance' | 'region' | 'none' = 'none';  let icon = '';  if (hasItemLocation) {    if (hasValidUserLocation && showDistance) {      // ?�용???�치가 ?�고 거리 ?�시가 ?�성?�된 경우      const km = haversineKm(userLoc!, itemLocation!);      displayText = formatDistance(km);      icon = '?��';    } else {      // ?�정???�보 ?�시      displayText = regionDong || regionSigungu || regionFull || '?�치 ?�보';      badgeType = 'region';      icon = '?��';    }  }  // ?�기�??��???  const sizeClasses = {    sm: 'px-2 py-1 text-xs',    md: 'px-3 py-1.5 text-sm',    lg: 'px-4 py-2 text-base'  };  // ?�?�별 ?�상  const typeClasses = {    distance: 'bg-green-100 text-green-800 border-green-200',    region: 'bg-gray-100 text-gray-800 border-gray-200',    none: 'bg-red-100 text-red-800 border-red-200'  };  return (    <span       className={`        inline-flex items-center gap-1 rounded-full font-medium border        ${sizeClasses[size]}        ${typeClasses[badgeType]}        ${className}      `}    >      {icon && <span className="text-xs">{icon}</span>}      {displayText}    </span>  );}// 기본 ?�보?�기export default LocationBadge; 
