import React, { useState, useCallback, useEffect } from 'react';import { performTextSearch } from '../../services/searchService';import type { SearchResult } from '../../features/market/types';interface SearchBoxProps {  query?: string;  onSearchResults?: (results: SearchResult[]) => void;  placeholder?: string;  className?: string;}export default function SearchBox({   query: initialQuery = '',  onSearchResults,   placeholder = "?ÅÌíàÎ™? ?úÍ∑∏, Î∏åÎûú?úÎ°ú Í≤Ä??..",  className = ""}: SearchBoxProps) {  const [query, setQuery] = useState(initialQuery);  const [isSearching, setIsSearching] = useState(false);  const [results, setResults] = useState<SearchResult[]>([]);  // Í≤Ä???§Ìñâ  const handleSearch = useCallback(async (searchQuery: string) => {    if (!searchQuery.trim()) {      setResults([]);      onSearchResults?.([]);      return;    }    setIsSearching(true);    try {      const searchResults = await performTextSearch(searchQuery, undefined, 20);      setResults(searchResults);      onSearchResults?.(searchResults);    } catch (error) {      console.error('Í≤Ä???§Ìå®:', error);      setResults([]);      onSearchResults?.([]);    } finally {      setIsSearching(false);    }  }, [onSearchResults]);  // ?ÖÎ†• Î≥ÄÍ≤????îÎ∞î?¥Ïä§ Í≤Ä??  useEffect(() => {    const timer = setTimeout(() => {      if (query.trim()) {        handleSearch(query);      } else {        setResults([]);        onSearchResults?.([]);      }    }, 300); // 300ms ?îÎ∞î?¥Ïä§    return () => clearTimeout(timer);  }, [query, handleSearch, onSearchResults]);  // ?∏Î? query prop Î≥ÄÍ≤????¥Î? ?ÅÌÉú ?ôÍ∏∞??  useEffect(() => {    if (initialQuery !== query) {      setQuery(initialQuery);    }  }, [initialQuery, query]);  // Ï¶âÏãú Í≤Ä??(Enter ??  const handleSubmit = (e: React.FormEvent) => {    e.preventDefault();    handleSearch(query);  };  return (    <div className={`relative ${className}`}>      <form onSubmit={handleSubmit} className="relative">        <input          type="text"          value={query}          onChange={(e) => setQuery(e.target.value)}          placeholder={placeholder}          className="w-full px-4 py-3 pl-12 pr-16 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 placeholder-gray-500"          disabled={isSearching}        />                {/* Í≤Ä???ÑÏù¥ÏΩ?*/}        <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">          {isSearching ? (            <div className="w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>          ) : (            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />            </svg>          )}        </div>        {/* Í≤Ä??Î≤ÑÌäº */}        <button          type="submit"          disabled={isSearching || !query.trim()}          className="absolute right-2 top-1/2 transform -translate-y-1/2 px-3 py-1.5 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"        >          Í≤Ä??        </button>      </form>      {/* Í≤Ä??Í≤∞Í≥º ÎØ∏Î¶¨Î≥¥Í∏∞ */}      {results.length > 0 && query.trim() && (        <div className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto">          <div className="p-3 border-b border-gray-100">            <p className="text-sm text-gray-600">              <span className="font-medium">{results.length}Í∞?/span>???ÅÌíà??Ï∞æÏïò?µÎãà??            </p>          </div>                    <div className="divide-y divide-gray-100">            {results.slice(0, 8).map((item) => (              <div                key={item.id}                className="p-3 hover:bg-gray-50 cursor-pointer transition-colors"                onClick={() => {                  // ?ÅÌíà ?ÅÏÑ∏ ?òÏù¥ÏßÄÎ°??¥Îèô                  window.location.href = `/market/${item.id}`;                }}              >                <div className="flex items-center space-x-3">                  {/* ?ÅÌíà ?¥Î?ÏßÄ */}                  <div className="flex-shrink-0 w-12 h-12 bg-gray-200 rounded-lg overflow-hidden">                    {item.imageUrl ? (                      <img                        src={item.imageUrl}                        alt={item.title}                        className="w-full h-full object-cover"                      />                    ) : (                      <div className="w-full h-full flex items-center justify-center text-gray-400 text-xs">                        ?ì∑                      </div>                    )}                  </div>                  {/* ?ÅÌíà ?ïÎ≥¥ */}                  <div className="flex-1 min-w-0">                    <h4 className="text-sm font-medium text-gray-900 truncate">                      {item.title}                    </h4>                    <p className="text-xs text-gray-500 truncate">                      {item.category} ??{item.region}                    </p>                    <div className="flex items-center justify-between mt-1">                      <span className="text-sm font-bold text-blue-600">                        {item.price.toLocaleString()}??                      </span>                      {item.ai?.quality_score && (                        <span className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded-full">                          {Math.round(item.ai.quality_score * 100)}%                        </span>                      )}                    </div>                  </div>                </div>              </div>            ))}          </div>          {results.length > 8 && (            <div className="p-3 border-t border-gray-100 text-center">              <button                onClick={() => handleSearch(query)}                className="text-sm text-blue-600 hover:text-blue-700 font-medium"              >                ?ÑÏ≤¥ Í≤∞Í≥º Î≥¥Í∏∞ ({results.length}Í∞?              </button>            </div>          )}        </div>      )}    </div>  );} 
