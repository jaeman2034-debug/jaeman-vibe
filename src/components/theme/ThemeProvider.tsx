import { createContext, useContext, useEffect, useMemo, useState } from "react";export type Theme = "light" | "dark" | "system";const ThemeCtx = createContext<{ theme: Theme; setTheme: (t: Theme) => void; toggle: () => void } | null>(null);function applyTheme(t: Theme) {  const root = document.documentElement;  const systemDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;  const wantsDark = t === "dark" || (t === "system" && systemDark);  root.classList.toggle("dark", wantsDark);  root.style.colorScheme = wantsDark ? "dark" : "light";}export function ThemeProvider({ children }: { children: React.ReactNode }) {  const [theme, setThemeState] = useState<Theme>(() => (localStorage.getItem("theme") as Theme) || "system");  useEffect(() => {    applyTheme(theme);    localStorage.setItem("theme", theme);    const mq = window.matchMedia("(prefers-color-scheme: dark)");    const onChange = () => theme === "system" && applyTheme("system");    mq.addEventListener?.("change", onChange);    return () => mq.removeEventListener?.("change", onChange);  }, [theme]);  const value = useMemo(    () => ({ theme, setTheme: (t: Theme) => setThemeState(t), toggle: () => setThemeState((p) => (p === "dark" ? "light" : "dark")) }),    [theme]  );  return <ThemeCtx.Provider value={value}>{children}</ThemeCtx.Provider>;}export function useTheme() {  const v = useContext(ThemeCtx);  if (!v) throw new Error("useTheme must be used within ThemeProvider");  return v;} 