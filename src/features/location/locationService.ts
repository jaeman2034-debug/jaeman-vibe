import { GeoPoint } from "firebase/firestore";export type LatLng = { lat: number; lng: number };export function getCurrentLocation(timeoutMs = 8000): Promise<LatLng> {  return new Promise((resolve, reject) => {    if (!navigator.geolocation) return reject(new Error("geolocation-unsupported"));    navigator.geolocation.getCurrentPosition(      (pos) => resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),      (err) => reject(err),      { enableHighAccuracy: true, maximumAge: 30000, timeout: timeoutMs }    );  });}export function toGeoPoint({ lat, lng }: LatLng) { return new GeoPoint(lat, lng); }/** ?úÎ≤Ñ ?ÑÎ°ù??/api/kakao/coord2region?x=lng&y=lat) ?¨Ïö©. ?ÜÏúºÎ©?null */export async function reverseGeocode({ lat, lng }: LatLng) {  try {    const r = await fetch(`/api/kakao/coord2region?x=${lng}&y=${lat}`);    if (!r.ok) throw new Error(String(r.status));    const j = await r.json();    const d = j?.documents?.[0];    if (!d) return null;    return {      si: d.region_1depth_name,      gu: d.region_2depth_name,      dong: d.region_3depth_name ?? d.region_3depth_h_name,      full: [d.region_1depth_name, d.region_2depth_name, d.region_3depth_name ?? d.region_3depth_h_name].filter(Boolean).join(" "),      provider: "kakao" as const,    };  } catch { return null; }}export function kakaoMapLink(title: string, p: LatLng) {  return `https://map.kakao.com/link/map/${encodeURIComponent(title)},${p.lat},${p.lng}`;}export function googleMapLink(p: LatLng) {  return `https://www.google.com/maps?q=${p.lat},${p.lng}`;} 