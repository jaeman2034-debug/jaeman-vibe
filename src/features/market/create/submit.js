"use strict";
// src/features/market/create/submit.tsimport { addDoc, collection, serverTimestamp, GeoPoint } from 'firebase/firestore';import { db } from '@/lib/firebase';import { getCurrentLocation, reverseGeocode } from '@/features/location/locationService';import type { ProductDoc, RegionInfo } from '@/types/product';// geohash ?�면 거리/주�?검?�에 ?�리import { geohashForLocation } from 'geofire-common';export interface MarketItemPayload {  title: string;  price: number;  description?: string;  category: string;  condition: 'new' | 'used' | 'refurbished';  images?: string[];  tags?: string[];  sellerId: string;  status: "active" | "sold";}export async function createMarketItem(payload: MarketItemPayload): Promise<string> {  try {    // 1. ?�재 ?�치 가?�오�?(?�택?�항)    let location = null;    let address = null;    let geohash = null;        try {      console.log('?�� ?�재 ?�치 가?�오??�?..');      location = await getCurrentLocation();            if (location.lat && location.lng) {        // 2. ????�코?�으�?주소 ?�보 가?�오�?        console.log('?�� 주소 ?�보 변??�?..');        address = await reverseGeocode(location.lat, location.lng);                // 3. geohash ?�성        geohash = geohashForLocation([location.lat, location.lng]);      }    } catch (locationError) {      console.warn('?�️ ?�치 ?�비???�패 (계속 진행):', locationError);      // ?�치 ?�비???�패?�도 ?�품 ?�록?� 계속 진행    }        // 4. Firestore???�?�할 ?�이??구성 (ProductDoc ?�?�에 맞춤)    const productData: Partial<ProductDoc> = {      title: payload.title,      price: payload.price,      description: payload.description,      images: payload.images,      sellerId: payload.sellerId,      status: payload.status,      createdAt: serverTimestamp(),      updatedAt: serverTimestamp()    };        // ?�치 ?�보가 ?�으�?ProductDoc ?�?�에 맞게 추�?    if (location && address && geohash) {      productData.location = new GeoPoint(location.lat, location.lng);      // ?�� loc ?�드 추�? (?�정??처리??      productData.loc = {        lat: location.lat,        lng: location.lng,      };      productData.region = {        si: address.sido,        gu: address.sigungu,        dong: address.dong,        full: address.full,        provider: "kakao"      };    } else {      // ?�치 ?�보가 ?�는 경우      productData.region = {        provider: "none"      };    }        // ?�� 기본 주소 ?�태 ?�정 (?�정??처리??    productData.addr = {      hjdStatus: 'pending' as const    };        // 5. Firestore???�??    console.log('?�� ?�품 ?�보 ?�??�?..');    const docRef = await addDoc(collection(db, 'products'), productData);        if (location && address) {      console.log('???�품 ?�록 ?�료 (?�치 ?�함):', {        id: docRef.id,        location: `${location.lat}, ${location.lng}`,        address: address.full,        geohash: geohash?.substring(0, 8) + '...'      });    } else {      console.log('???�품 ?�록 ?�료 (?�치 ?�음):', {        id: docRef.id      });    }        return docRef.id;      } catch (error) {    console.error('???�품 ?�록 ?�패:', error);    throw new Error(`?�품 ?�록???�패?�습?�다: ${error instanceof Error ? error.message : '?????�는 ?�류'}`);  }}// ?�치 ?�보�??�데?�트?�는 ?�수export async function updateItemLocation(itemId: string): Promise<void> {  try {    const location = await getCurrentLocation();    const address = await reverseGeocode(location.lat, location.lng);    const geohash = geohashForLocation([location.lat, location.lng]);        // Firestore ?�데?�트 로직 (구현 ?�요)    console.log('?�� ?�치 ?�보 ?�데?�트 ?�료:', address.full);      } catch (error) {    console.error('???�치 ?�보 ?�데?�트 ?�패:', error);    throw error;  }} 
