// src/features/market/marketService.tsimport { auth, storage, db } from '@/lib/firebase';// ??getStorage import ?úÍ±∞// import { getStorage } from 'firebase/storage';// ??getStorage() ÏßÅÏ†ë ?∏Ï∂ú ?úÍ±∞// const storage = getStorage(app);import { addDoc, collection, serverTimestamp } from 'firebase/firestore';import { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';// ?òÍ≤ΩÎ≥Ä??Ï≤¥ÌÅ¨const USE_STORAGE = import.meta.env.VITE_USE_STORAGE === 'true';console.log("[MARKET_SERVICE] USE_STORAGE:", USE_STORAGE);export type NewItemInput = {  title: string;  price: number;  category: string;  condition: '?àÏÉÅ?? | 'ÏµúÏÉÅ' | '?? | 'Ï§? | '??;  description: string;  images: File[];  location?: { lat: number; lng: number } | null;};export async function uploadImages(files: File[], uid: string) {  const urls: string[] = [];    if (!USE_STORAGE) {    console.log('[MARKET_SERVICE] Skipping image upload (USE_STORAGE:', USE_STORAGE, ')');    return urls;  }    console.log('[MARKET_SERVICE] Uploading images to storage...');  for (const file of files) {    const id = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;    const key = `products/${uid}/${id}-${file.name}`;    const r = ref(storage, key);    const task = uploadBytesResumable(r, file, { contentType: file.type });    await new Promise<void>((resolve, reject) => {      task.on(        'state_changed',        undefined,        reject,        async () => {          const url = await getDownloadURL(task.snapshot.ref);          urls.push(url);          resolve();        }      );    });  }  return urls;}export async function createMarketItem(input: NewItemInput) {  const user = auth.currentUser;  if (!user) throw new Error('Î°úÍ∑∏?∏Ïù¥ ?ÑÏöî?©Îãà??');  const imageUrls = input.images.length ? await uploadImages(input.images, user.uid) : [];      const docRef = await addDoc(collection(db, 'market_items'), {      title: input.title,      price: input.price,      category: input.category,      condition: input.condition,      description: input.description,      images: imageUrls,      uid: user.uid,      sellerId: user.uid, // ???ÑÏàò: ?êÎß§??UID Ï∂îÍ? (Í∏∞Ï°¥ uid?Ä Ï§ëÎ≥µ?¥Ï?Îß??∏Ìôò???†Ï?)      seller: {        uid: user.uid,        displayName: user.displayName || null,        email: user.email || null,      },      location: input.location || null,      status: 'active',      createdAt: serverTimestamp(),      updatedAt: serverTimestamp(),    });  return { id: docRef.id, images: imageUrls };} 
