import { useState, useCallback } from 'react';
export const useAIFeatures = () => { const [isAnalyzing, setIsAnalyzing] = useState(false); const [lastAnalysis, setLastAnalysis] = useState(null); const [lastError, setLastError] = useState(null); const [analysisProgress, setAnalysisProgress] = useState(0); const [currentFile, setCurrentFile] = useState(null); const analyzeProductImageWithHook = useCallback(async (file, prompt) => { setIsAnalyzing(true); setLastError(null); setAnalysisProgress(0); setCurrentFile(file); try { }
finally { } }); }; // 1. ?�일 ?�효??검??      const validation = validateImageFile(file);      if (!validation.valid) {        throw new Error(validation.error || 'invalid-file');      }      // 2. 진행�??��??�이??(?�용??경험 ?�상)      const progressInterval = setInterval(() => {        setAnalysisProgress(prev => {          if (prev >= 90) return prev;          return prev + Math.random() * 10;        });      }, 200);      // 3. AI 분석 ?�행      const result = await analyzeProductImage(file, prompt);            // 4. 진행�??�료      clearInterval(progressInterval);      setAnalysisProgress(100);      // 5. 결과 ?�??      setLastAnalysis(result);      return result;    } catch (error) {      const errorMessage = error instanceof Error ? error.message : 'unknown-error';      const userMessage = getErrorMessage(errorMessage);            const aiError: AIAnalysisError = {        error: errorMessage,        message: userMessage      };            setLastError(aiError);      console.error('[AI_ANALYZE] 분석 ?�패:', error);      return null;    } finally {      setIsAnalyzing(false);      setCurrentFile(null);      // 진행�?초기?�는 ?�간??지????      setTimeout(() => setAnalysisProgress(0), 1000);    }  }, []);  const analyzeMultipleImagesWithHook = useCallback(async (    files: File[],     prompt?: string  ): Promise<AIAnalysisResult[]> => {    setIsAnalyzing(true);    setLastError(null);    setAnalysisProgress(0);    try {      // 1. 모든 ?�일 ?�효??검??      const validations = files.map(file => validateImageFile(file));      const invalidFiles = validations.filter(v => !v.valid);            if (invalidFiles.length > 0) {        const firstError = invalidFiles[0].error || 'invalid-file';        throw new Error(firstError);      }      // 2. 진행�??��??�이??      const progressInterval = setInterval(() => {        setAnalysisProgress(prev => {          if (prev >= 90) return prev;          return prev + Math.random() * 5;        });      }, 300);      // 3. ?�중 ?��?지 분석      const results = await analyzeMultipleImages(files, prompt);            // 4. 진행�??�료      clearInterval(progressInterval);      setAnalysisProgress(100);      // 5. �?번째 결과�?마�?�?분석?�로 ?�정      if (results.length > 0 && !results[0].error) {        setLastAnalysis(results[0]);      }      return results;    } catch (error) {      const errorMessage = error instanceof Error ? error.message : 'unknown-error';      const userMessage = getErrorMessage(errorMessage);            const aiError: AIAnalysisError = {        error: errorMessage,        message: userMessage      };            setLastError(aiError);      console.error('[AI_ANALYZE] ?�중 ?��?지 분석 ?�패:', error);      return [];    } finally {      setIsAnalyzing(false);      setTimeout(() => setAnalysisProgress(0), 1000);    }  }, []);  const clearAnalysis = useCallback(() => {    setLastAnalysis(null);    setLastError(null);    setAnalysisProgress(0);    setCurrentFile(null);  }, []);  const getAnalysisStatus = useCallback(() => {    if (isAnalyzing) return 'analyzing';    if (lastError) return 'error';    if (lastAnalysis) return 'success';    return 'idle';  }, [isAnalyzing, lastError, lastAnalysis]);  const retryAnalysis = useCallback(async () => {    if (currentFile) {      return await analyzeProductImageWithHook(currentFile);    }    return null;  }, [currentFile, analyzeProductImageWithHook]);  return {    // ?�태    isAnalyzing,    lastAnalysis,    lastError,    analysisStatus: getAnalysisStatus(),    analysisProgress,    currentFile,        // ?�션    analyzeProductImage: analyzeProductImageWithHook,    analyzeMultipleImages: analyzeMultipleImagesWithHook,    clearAnalysis,    retryAnalysis,        // ?�틸리티    hasAnalysis: !!lastAnalysis,    hasError: !!lastError,    canRetry: !!currentFile && !isAnalyzing,        // 진행�??�보    progressPercentage: Math.round(analysisProgress),    isProgressComplete: analysisProgress >= 100,  };}; 
