"use strict";
// adminDong.tsimport { db } from "./firebase";import { getDoc, doc, updateDoc, serverTimestamp, collection, query, where, getDocs, limit } from "firebase/firestore";async function fetchHjd(lat: number, lng: number) {  const key = import.meta.env.VITE_KAKAO_REST_KEY;  if (!key) {    console.error('[HJD] VITE_KAKAO_REST_KEY가 ?�정?��? ?�음');    return null;  }    const url = `https://dapi.kakao.com/v2/local/geo/coord2address.json?y=${lat}&x=${lng}`;  try {    const res = await fetch(url, {       headers: {         Authorization: `KakaoAK ${key}`,        'Content-Type': 'application/json'      }    });        if (!res.ok) {      throw new Error(`HTTP ${res.status}: ${res.statusText}`);    }        const j = await res.json();    return j?.documents?.[0]?.address?.region_3depth_h_name        ?? j?.documents?.[0]?.road_address?.region_3depth_h_name        ?? null;  } catch (error) {    console.error('[HJD] 카카??API ?�출 ?�패:', error);    return null;  }}export async function checkAdminDong(id: string) {  const ref = doc(db, "products", id);  const snap = await getDoc(ref);  if (!snap.exists()) {    console.warn('[HJD] 문서가 존재?��? ?�음:', id);    return;  }    const data = snap.data() as any;  const loc = data?.loc;    if (!loc || typeof loc.lat !== 'number' || typeof loc.lng !== 'number') {    await updateDoc(ref, {       "addr.hjdStatus": "fail",      "addr.hjdCheckedAt": serverTimestamp()    });    console.log('[HJD] 좌표 ?�음 ??fail:', id);    return;  }    try {    const hjd = await fetchHjd(loc.lat, loc.lng);    if (hjd) {      await updateDoc(ref, {        "addr.hjd": hjd,        "addr.hjdStatus": "ok",        "addr.hjdSource": "kakao",        "addr.hjdCheckedAt": serverTimestamp()      });      console.log('[HJD] ?�공:', id, hjd);    } else {      await updateDoc(ref, {         "addr.hjdStatus": "fail",        "addr.hjdCheckedAt": serverTimestamp()      });      console.log('[HJD] ?�정??찾을 ???�음 ??fail:', id);    }  } catch (error) {    console.error('[HJD] ?�류 발생:', error);    await updateDoc(ref, {      "addr.hjdStatus": "fail",      "addr.hjdCheckedAt": serverTimestamp()    });  }}export async function backfillDong(batch = 20) {  const qs = await getDocs(query(    collection(db, "products"),     where("addr.hjdStatus", "in", ["pending", null as any]),     limit(batch)  ));    console.log(`[HJD] 백필 ?�?? ${qs.size}�?);    for (const d of qs.docs) {    console.log(`[HJD] 처리 �? ${d.id}`);    await checkAdminDong(d.id);    // API ?�출 ?�한???�한 지??    await new Promise(resolve => setTimeout(resolve, 100));  }    console.log(`[HJD] 백필 ?�료: ${qs.size}�?처리`);}
