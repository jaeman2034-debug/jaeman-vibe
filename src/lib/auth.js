"use strict";
// src/lib/auth.tsximport React, { createContext, useContext, useEffect, useState } from 'react';import { auth } from '@/lib/firebase';import {  GoogleAuthProvider,  onAuthStateChanged,  signInWithPopup,  signOut,  User,} from 'firebase/auth';// ---- Context ----type AuthContextValue = {  user: User | null;  loading: boolean;  signInWithGoogle: () => Promise<void>;  // ??loginWithGoogle ??signInWithGoogle  logout: () => Promise<void>;            // ??signOut ??logout (충돌 방�?)};const AuthContext = createContext<AuthContextValue | undefined>(undefined);// ??Google Provider 직접 ?�성const provider = new GoogleAuthProvider();// provider.setCustomParameters({ prompt: 'select_account' });  // ?�택?�항export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {  const [user, setUser] = useState<User | null>(null);  const [loading, setLoading] = useState(true);  useEffect(() => {    const unsub = onAuthStateChanged(auth, u => {      setUser(u ?? null);      setLoading(false);    });    return () => unsub();  }, []);  const signInWithGoogle = async () => {  // ???�수�?변�?    await signInWithPopup(auth, provider);  };  const logout = async () => {            // ???�수�?변�?    await signOut(auth);  };  return (    <AuthContext.Provider value={{ user, loading, signInWithGoogle, logout }}>      {children}    </AuthContext.Provider>  );};export const useAuth = () => {  const ctx = useContext(AuthContext);  if (!ctx) throw new Error('useAuth must be used within AuthProvider');  return ctx;};// ---- helpers ----export const getUid = (): string | null => auth.currentUser?.uid ?? null;// ---- UI shown when login is required ----export const LoginRequiredUI: React.FC<{  title?: string;  description?: string;  buttonText?: string;}> = ({  title = '로그?�이 ?�요?�니??',  description = '??기능???�용?�려�?로그???�주?�요.',  buttonText = 'Google�?로그??,}) => {  const { signInWithGoogle, loading } = useAuth();  // ???�수�?변�?  return (    <div style={{ padding: 24, textAlign: 'center' }}>      <div style={{ fontSize: 20, fontWeight: 700, marginBottom: 8 }}>{title}</div>      <div style={{ color: '#666', marginBottom: 16 }}>{description}</div>      <button disabled={loading} onClick={signInWithGoogle} style={{ padding: '10px 16px' }}>        {buttonText}      </button>    </div>  );};// (?�택) 보호 ?�퍼export const RequireAuth: React.FC<{ children: React.ReactNode }> = ({ children }) => {  const { user, loading } = useAuth();  if (loading) return null;  if (!user) return <LoginRequiredUI />;  return <>{children}</>;}; 
