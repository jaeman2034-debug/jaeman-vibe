"use strict";
// devHelpers.ts (index?�서 import)import { getAuth } from "firebase/auth";import { backfillDong, checkAdminDong } from "./adminDong";import { getFirestore, doc, updateDoc, serverTimestamp } from "firebase/firestore";// DEV?�서�?window ?�출if (import.meta.env.DEV) {  (window as any).authUser = () => console.log(getAuth().currentUser);    (window as any).smoke = async () => {    const { uploadImage } = await import("./upload");    const { addDoc, collection, serverTimestamp } = await import("firebase/firestore");    const { db } = await import("./firebase");    const { url, path } = await uploadImage(new File([new Blob(["iVBORw0KGgo="],{type:"image/png"})], "s.png"));    const ref = await addDoc(collection(db,"products"), {       title:"smoke",       price:1,       category:"기�?",       images:[{url,path}],       createdAt:serverTimestamp(),       addr:{hjdStatus:"pending"}     });    console.log("SMOKE:", ref.id, url);  };    (window as any).backfillDong = backfillDong;  (window as any).checkAdminDong = checkAdminDong;  // 1) env ?�인  (window as any).envInfo = () => ({    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,    bucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,    kakaoKeyPresent: !!import.meta.env.VITE_KAKAO_REST_KEY,  });  // 2) ?�의 좌표 ?�팅(?�을 ??빠르�??�스??  (window as any).setLoc = async (id: string, lat: number, lng: number) => {    const db = getFirestore();    await updateDoc(doc(db, "products", id), {      "loc.lat": Number(lat),      "loc.lng": Number(lng),      "addr.hjdStatus": "pending",      "addr.hjdCheckedAt": serverTimestamp(),    });    console.log("[HJD] setLoc done:", id, lat, lng);  };  // 3) 카카??API ??권한/???��?)  (window as any).kakaoPing = async () => {    const key = import.meta.env.VITE_KAKAO_REST_KEY;    const res = await fetch(      "https://dapi.kakao.com/v2/local/geo/coord2address.json?y=37.5665&x=126.9780",      { headers: { Authorization: `KakaoAK ${key}` } }    );    console.log("kakaoPing", res.status, await res.json());  };  // 4) ?�정???�태 ?�스??(HjdBadge 컴포?�트 ?�스?�용)  (window as any).testHjdBadge = () => {    console.log("?�� HjdBadge ?�스???�나리오:");    console.log("1. 좌표 ?�음: loc: null");    console.log("2. 좌표 ?�음, pending: loc: {lat: 37.5665, lng: 126.9780}, status: 'pending'");    console.log("3. 좌표 ?�음, ?�공: loc: {lat: 37.5665, lng: 126.9780}, status: 'ok'");    console.log("4. 좌표 ?�음, ?�패: loc: {lat: 37.5665, lng: 126.9780}, status: 'fail'");    console.log("5. hjd ?�음: loc: {lat: 37.5665, lng: 126.9780}, hjd: '종로�?");  };  // 5) Firestore ?�덱???�태 ?�인  (window as any).checkIndexes = () => {    console.log("?�� Firestore ?�덱???�태 ?�인:");    console.log("?�재 ?�로?�트???�덱??목록???�인?�려�?");    console.log("?��??�에?? firebase firestore:indexes");    console.log("?�는 Firebase Console > Firestore > Indexes ??��???�인");    console.log("");    console.log("가�?추천 기능???�요???�덱?�들:");    console.log("??(category, status, createdAt)");    console.log("??(category, createdAt)");    console.log("??(status, createdAt)");    console.log("");    console.log("?�덱?��? ?�다�? firebase deploy --only firestore:indexes");  };  // 6) 가�?추천 ?�버�?  (window as any).debugPriceSuggest = async (category = "?�자기기") => {    console.log("?�� 가�?추천 ?�버�??�작:", category);        const { collection, query, where, orderBy, limit, getDocs } = await import("firebase/firestore");    const { db } = await import("./firebase");        try {      // 1) ?�체 ?�품 ???�인      const allProducts = await getDocs(collection(db, "products"));      console.log(`?�� ?�체 ?�품 ?? ${allProducts.size}�?);            // 2) 카테고리�??�품 ???�인      const categoryProducts = await getDocs(query(        collection(db, "products"),        where("category", "==", category)      ));      console.log(`?�� ${category} 카테고리 ?�품 ?? ${categoryProducts.size}�?);            // 3) ?�태�??�품 ???�인      const statusProducts = await getDocs(query(        collection(db, "products"),        where("status", "==", "?�료")      ));      console.log(`?�� ?�료 ?�태 ?�품 ?? ${statusProducts.size}�?);            // 4) 카테고리 + ?�태 조합 ?�인      const categoryStatusProducts = await getDocs(query(        collection(db, "products"),        where("category", "==", category),        where("status", "==", "?�료")      ));      console.log(`?�� ${category} + ?�료 ?�태 ?�품 ?? ${categoryStatusProducts.size}�?);            // 5) ?�제 ?�이???�플 ?�인      if (categoryStatusProducts.size > 0) {        const sample = categoryStatusProducts.docs[0].data();        console.log("?�� ?�플 ?�이??", {          id: categoryStatusProducts.docs[0].id,          title: sample.title,          category: sample.category,          status: sample.status,          price: sample.price,          createdAt: sample.createdAt,          updatedAt: sample.updatedAt        });      }            // 6) ?�른 카테고리???�인      const allCategories = new Set();      allProducts.forEach(doc => {        const data = doc.data();        if (data.category) allCategories.add(data.category);      });      console.log("?�� ?�용 가?�한 카테고리??", Array.from(allCategories));            // 7) ?�른 ?�태???�인      const allStatuses = new Set();      allProducts.forEach(doc => {        const data = doc.data();        if (data.status) allStatuses.add(data.status);      });      console.log("?�� ?�용 가?�한 ?�태??", Array.from(allStatuses));          } catch (error) {      console.error("??가�?추천 ?�버�??�패:", error);    }  };  // 7) ?��?지 ?�이 ?�스???�품 ?�성 (CORS 문제 ?�회)  (window as any).smokeNoImage = async () => {    try {      const { addDoc, collection, serverTimestamp } = await import("firebase/firestore");      const { db } = await import("./firebase");            const ref = await addDoc(collection(db, "products"), {         title: "?�스???�품 (?��?지 ?�음)",        price: 10000,        category: "기�?",        description: "CORS 문제�??�회???�스???�품?�니??",        images: [],        createdAt: serverTimestamp(),        status: "?�매�?,        addr: { hjdStatus: "pending" }      });            console.log("???�스???�품 ?�성 ?�공:", ref.id);      return ref.id;    } catch (error) {      console.error("???�스???�품 ?�성 ?�패:", error);      throw error;    }  };  // 8) 브라?��? ?�치�??�품 좌표 ?�정 (HJD 문제 ?�결)  (window as any).setLocFromBrowser = async (productId: string) => {    try {      const { getFirestore, doc, updateDoc, serverTimestamp, GeoPoint } = await import("firebase/firestore");            // 브라?��? ?�치 권한 ?�청      const position = await new Promise<GeolocationPosition>((resolve, reject) => {        navigator.geolocation.getCurrentPosition(resolve, reject, {          enableHighAccuracy: true,          timeout: 10000,          maximumAge: 60000        });      });            const { latitude, longitude } = position.coords;      const db = getFirestore();            // ?�품 문서??loc ?�드 추�?      await updateDoc(doc(db, "products", productId), {        loc: new GeoPoint(latitude, longitude),        "addr.hjdStatus": "pending",        "addr.hjdCheckedAt": serverTimestamp(),        updatedAt: serverTimestamp()      });            console.log("??[HJD] 브라?��? ?�치�?좌표 ?�정 ?�료:", {        productId,        lat: latitude,        lng: longitude,        hjdStatus: "pending"      });            return { lat: latitude, lng: longitude };    } catch (error) {      console.error("??[HJD] 브라?��? ?�치 ?�정 ?�패:", error);      throw error;    }  };  // 9) 기존 ?�품?�에 좌표 ?�괄 ?�정 (벌크 보정)  (window as any).bulkSetLocFromBrowser = async (batchSize = 5) => {    try {      const { collection, query, getDocs, updateDoc, serverTimestamp } = await import("firebase/firestore");      const { db } = await import("./firebase");            // loc???�는 ?�품??조회      const productsRef = collection(db, "products");      const snapshot = await getDocs(productsRef);            const productsWithoutLoc = snapshot.docs.filter(doc => {        const data = doc.data();        return !data.loc || !data.loc.latitude || !data.loc.longitude;      });            console.log(`?�� [HJD] 좌표가 ?�는 ?�품: ${productsWithoutLoc.length}�?);            if (productsWithoutLoc.length === 0) {        console.log("??[HJD] 모든 ?�품??좌표가 ?��? ?�정?�어 ?�습?�다.");        return;      }            // 브라?��? ?�치 가?�오�?      const position = await new Promise<GeolocationPosition>((resolve, reject) => {        navigator.geolocation.getCurrentPosition(resolve, reject, {          enableHighAccuracy: true,          timeout: 10000,          maximumAge: 60000        });      });            const { latitude, longitude } = position.coords;      console.log(`?�� [HJD] ?�재 ?�치: ${latitude}, ${longitude}`);            // 배치 ?�기만큼 처리      const batch = productsWithoutLoc.slice(0, batchSize);      let successCount = 0;            for (const doc of batch) {        try {          await updateDoc(doc.ref, {            loc: new GeoPoint(latitude, longitude),            "addr.hjdStatus": "pending",            "addr.hjdCheckedAt": serverTimestamp(),            updatedAt: serverTimestamp()          });          successCount++;          console.log(`??[HJD] ${doc.id} 좌표 ?�정 ?�료`);        } catch (error) {          console.error(`??[HJD] ${doc.id} 좌표 ?�정 ?�패:`, error);        }      }            console.log(`?�� [HJD] 벌크 좌표 ?�정 ?�료: ${successCount}/${batch.length}�??�공`);      return { successCount, total: batch.length };    } catch (error) {      console.error("??[HJD] 벌크 좌표 ?�정 ?�패:", error);      throw error;    }  };  // 10) ?�품 ?��?지 ?�로??(콘솔?�서 직접 ?�용)  (window as any).uploadProductImage = async (productId: string, file: File) => {    try {      const { getStorage, ref, uploadBytesResumable, getDownloadURL } = await import("firebase/storage");      const { getFirestore, doc, updateDoc, arrayUnion } = await import("firebase/firestore");            const storage = getStorage();      const path = `market/${Date.now()}-${file.name}`;      const task = uploadBytesResumable(ref(storage, path), file, { contentType: file.type });            console.log("?�� [?��?지] ?�로???�작...");      await task;      const url = await getDownloadURL(ref(storage, path));      console.log("??[?��?지] ?�로???�료:", url);      const db = getFirestore();      await updateDoc(doc(db, "products", productId), {        images: arrayUnion({ path, url }),        cover: url,        hasImages: true,        updatedAt: serverTimestamp()      });            console.log("??[?��?지] ?�품 문서 ?�데?�트 ?�료");      return { url, path };    } catch (error) {      console.error("??[?��?지] ?�로???�패:", error);      throw error;    }  };  // 11) 브라?��? ?�치�??�품 좌표 ?�정 (간단 버전)  (window as any).setLocFromBrowser = async (productId: string) => {    try {      const { getFirestore, doc, updateDoc, GeoPoint } = await import("firebase/firestore");            return new Promise<void>((resolve, reject) => {        navigator.geolocation.getCurrentPosition(async ({ coords }) => {          try {            const db = getFirestore();            await updateDoc(doc(db, "products", productId), {              loc: new GeoPoint(coords.latitude, coords.longitude),              "addr.hjdStatus": "pending",              "addr.hjdCheckedAt": serverTimestamp(),              updatedAt: serverTimestamp()            });                        console.log("??[HJD] 브라?��? ?�치�?좌표 ?�정 ?�료:", {              productId,              lat: coords.latitude,              lng: coords.longitude            });            resolve();          } catch (error) {            reject(error);          }        }, reject, { enableHighAccuracy: true });      });    } catch (error) {      console.error("??[HJD] 브라?��? ?�치 ?�정 ?�패:", error);      throw error;    }  };  // 12) 모든 ?�품??좌표 ?�괄 보정 (?�택)  (window as any).backfillLocForAll = async () => {    try {      const { getFirestore, collection, getDocs, updateDoc, doc, GeoPoint } = await import("firebase/firestore");            // ?�재 브라?��? ?�치�?받아, loc???�는 문서�??�괄 채�?      const position = await new Promise<GeolocationPosition>((resolve, reject) =>        navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: true })      );            const geoPoint = new GeoPoint(position.coords.latitude, position.coords.longitude);      console.log(`?�� [HJD] ?�재 ?�치: ${position.coords.latitude}, ${position.coords.longitude}`);      const db = getFirestore();      const snapshot = await getDocs(collection(db, "products"));      const jobs: Promise<any>[] = [];            snapshot.forEach(s => {        const data = s.data() as any;        if (!data.loc) {          jobs.push(updateDoc(doc(db, "products", s.id), {             loc: geoPoint,            "addr.hjdStatus": "pending",            "addr.hjdCheckedAt": serverTimestamp(),            updatedAt: serverTimestamp()          }));        }      });            if (jobs.length === 0) {        console.log("??[HJD] 모든 ?�품??좌표가 ?��? ?�정?�어 ?�습?�다.");        return;      }            console.log(`?�� [HJD] 좌표가 ?�는 ?�품: ${jobs.length}�?);      await Promise.all(jobs);      console.log("?�� [HJD] 모든 ?�품??좌표 ?�정 ?�료!");          } catch (error) {      console.error("??[HJD] ?�괄 좌표 ?�정 ?�패:", error);      throw error;    }  };    console.log("?�� Dev helpers ready:");  console.log("  - window.authUser() : ?�재 ?�증 ?�용???�인");  console.log("  - window.smoke() : ?�스???�품 ?�성");  console.log("  - window.backfillDong(batchSize) : 벌크 ?�정???�인");  console.log("  - window.checkAdminDong(id) : ?�건 ?�정???�인");  console.log("  - window.envInfo() : ?�경변???�인");  console.log("  - window.setLoc(id, lat, lng) : ?�품 좌표 ?�정");  console.log("  - window.kakaoPing() : 카카??API ?�결 ?�스??);  console.log("  - window.testHjdBadge() : ?�정???�태 ?�스???�나리오");  console.log("  - window.checkIndexes() : Firestore ?�덱???�태 ?�인");  console.log("  - window.debugPriceSuggest(category) : 가�?추천 ?�버�?);  console.log("  - window.smokeNoImage() : ?��?지 ?�이 ?�스???�품 ?�성 (CORS ?�회)");  console.log("  - window.setLocFromBrowser(id) : 브라?��? ?�치�??�품 좌표 ?�정 (HJD ?�결)");  console.log("  - window.bulkSetLocFromBrowser(batchSize) : 기존 ?�품??좌표 ?�괄 ?�정");  console.log("  - window.uploadProductImage(productId, file) : ?�품 ?��?지 ?�로??);  console.log("  - window.setLocFromBrowser(id) : 브라?��? ?�치�??�품 좌표 ?�정 (간단 버전)");  console.log("  - window.backfillLocForAll() : 모든 ?�품??좌표 ?�괄 보정");}
