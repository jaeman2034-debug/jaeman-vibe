// src/lib/image.tsimport { getDownloadURL, ref } from 'firebase/storage';import { storage } from './firebase';export const FALLBACK_IMG = '/img/placeholder.svg';const isHttp = (s: string) => /^https?:\/\//i.test(s);const isDataUri = (s: string) => /^data:image\/(png|jpe?g|webp|gif);base64,/i.test(s);/** gs:// ?êÎäî ?§ÌÜ†Î¶¨Ï? ?ÅÎ?Í≤ΩÎ°ú(?ïÏû•???¨Ìï®) Í∞ÑÎã® Ï≤¥ÌÅ¨ */const looksLikeStoragePath = (s: string) =>  /^gs:\/\//i.test(s) || /^[^:\s]+\/[^?\s]+\.(png|jpe?g|webp|gif)$/i.test(s);/** ?åÎçîÎß?Í∞Ä?•Ìïú URLÎ°?Î≥Ä?? http ??Í∑∏Î?Î°? data: ??Í∑∏Î?Î°? storage Í≤ΩÎ°ú ??getDownloadURL */export async function toRenderableUrl(raw?: string): Promise<string> {  try {    if (!raw) return FALLBACK_IMG;    if (isHttp(raw)) return raw;    if (isDataUri(raw)) return raw;    if (looksLikeStoragePath(raw)) {      return await getDownloadURL(ref(storage, raw));    }  } catch (e) {    // Î≥Ä???§Ìå® ???¥Î∞±    console.warn('[image] resolve failed => fallback', raw, e);  }  return FALLBACK_IMG;}/** ?¥Î?ÏßÄ ?§Ïö¥?§Ï??ºÎßÅ (?àÏßà ÏµúÏ†Å?? */export async function downscaleImage(file: File, maxW = 1280, quality = 0.85): Promise<Blob> {  const bmp = await createImageBitmap(file);  const scale = Math.min(1, maxW / bmp.width);  const w = Math.round(bmp.width * scale);  const h = Math.round(bmp.height * scale);  const canvas = document.createElement('canvas');  canvas.width = w; canvas.height = h;  const ctx = canvas.getContext('2d')!;  ctx.drawImage(bmp, 0, 0, w, h);  return await new Promise((resolve) => {    canvas.toBlob((blob) => resolve(blob!), 'image/jpeg', quality);  });}
