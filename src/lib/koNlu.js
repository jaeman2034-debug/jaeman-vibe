"use strict";
// src/lib/koNlu.tsexport type ExtractResult = { value: string; ok: boolean; s?: string; text?: string; seg?: string };// -------------------- 공통 ?�틸 --------------------const PROVIDER_KO: Record<string, string> = {  '지메일': 'gmail', '지 메일': 'gmail', 'g메일': 'gmail', 'gmail': 'gmail',  '?�이�?: 'naver', '?�이�?: 'naver', 'naver': 'naver',  '?�음': 'daum', '?�메??: 'hanmail',  '카카?�메??: 'kakao', '카카??: 'kakao',  '?�후': 'yahoo', '?�메??: 'hotmail', '??메일': 'hotmail',  'outlook': 'outlook'};const TLD_KO: Record<string, string> = {  '?�컴': 'com', '�?: 'com', '�?: 'com', 'com': 'com',  '??: 'net',  'org': 'org', '?�알지': 'org', '?��???: 'org',  '케?�알': 'kr', 'kr': 'kr',  '�?: 'co', '?�오': 'co'};// 기호/불릿/?�옴?????�반 ?�리 (?�름??function sanitizeText(s: string) {  return s    .replace(/(?:^|\s)[??-?��?\s+(?=[?��??��?A-Za-z가-??)/g, ' ') // 불릿/?�???�음 ?�옴??문자 ?�작    .replace(/[??-?��?/g, ' ')    .replace(/[?��??��?«»?�」『�?/g, ' ')    .replace(/[(){}\[\]<>]/g, ' ')    .replace(/[!�?�?/g, '.')    .replace(/\s+/g, ' ')    .trim();}// '????�? ??'?�재�?, 2~6??최장 ?�보function pickHangulName(seg: string) {  const comp = seg.replace(/([가-??)\s+(?=[가-??)/g, '$1');  const tokens = comp.match(/[가-??{2,6}/g) || [];  tokens.sort((a, b) => b.length - a.length);  return tokens[0] || '';}// -------------------- ?�름 추출 --------------------export function extractName(t: string): ExtractResult {  const text = sanitizeText(t);  const TRIG = /(?:??s*)??�름\s*(?:?�|??:)?\s*/i;  // ?�입?�다/?�에???�라�??�구???�고?�·문?��??�·공백·끝 ?�에???�톱  const STOP = /(?!^)(?=$|[\n,.\-!???'\)\]\} ]|?�니???�에???�라�??�구???�고)/i;  const re = new RegExp(TRIG.source + '([\\s\\S]{0,30}?)' + STOP.source, 'i');  const m = text.match(re);  const seg = m ? m[1] : '';  const name = pickHangulName(seg).replace(/??/, '');  return { value: name, ok: !!name, text, seg };}// -------------------- ?�메??추출 --------------------function normalizeEmailTokens(s: string) {  // 1) 기호 치환  s = s    .replace(/�?s*�?s*??골뱅????\bat\b/gi, ' @ ')    .replace(/?????�트|\bdot\b/gi, ' . ');  // 2) 공급???�메???��?) ???�문 먼�?  for (const [k, v] of Object.entries(PROVIDER_KO)) {    s = s.replace(new RegExp(k, 'gi'), ' ' + v + ' ');  }  for (const [k, v] of Object.entries(TLD_KO)) {    s = s.replace(new RegExp(k, 'gi'), ' ' + v + ' ');  }  // 3) ?�반 ?�큰 ?�거 (지메일 ??gmail�?바�??�라 ?�전)  s = s.replace(    /(??s*�?s*(?:?????\s*(?:????�?�?|??s*�??�멜|�?s*??메일|주소|?�|?????�니???�에??말할�??�시|??.)/gi,    ' '  );  return s.replace(/\s+/g, ' ').trim();}export function extractEmail(raw: string): ExtractResult {  const TRIG = /(?:??s*�?s*(?:?????\s*(?:????�?�?|??s*�??�멜|�?s*??메일)\s*(?:?�|????:)?\s*/i;  const STOP = /(?�화|번호|비�?번호|비번|?�름|???�니???�에???�시 �??�질�?/i;  const m = raw.match(new RegExp(TRIG.source + '([\\s\\S]{0,120}?)(?=' + STOP.source + '|$)', 'i'));  const seg = m ? m[1] : raw;  const s = normalizeEmailTokens(seg);  const em = s.match(/([A-Za-z0-9._\- ]+)\s*@\s*([A-Za-z0-9\-]+)\s*\.\s*([A-Za-z]{2,})/);  if (!em) return { value: '', ok: false, s };  const id = em[1].replace(/[\s.]/g, '').toLowerCase();  const provider = em[2].toLowerCase();  const tld = em[3].toLowerCase();  return { value: `${id}@${provider}.${tld}`, ok: true, s };}
