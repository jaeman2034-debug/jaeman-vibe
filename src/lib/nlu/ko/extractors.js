"use strict";
// src/lib/nlu/ko/extractors.ts// ?��? ?�름/?�메??간이 추출�?(콘솔?�서???�사??function sanitize(s: string) {    return s      .replace(/(?:^|\s)[??-?��?\s+(?=[?��??��?A-Za-z가-??)/g, ' ')      .replace(/[??-?��?/g, ' ')      .replace(/[?��??��?«»?�」『�?/g, ' ')      .replace(/[(){}\[\]<>]/g, ' ')      .replace(/[!�?�?/g, '.')      .replace(/\s+/g, ' ')      .trim();  }    function pickHangulName(seg: string) {    seg = seg.replace(/([가-??)\s+(?=[가-??)/g, '$1'); // ????�????�재�?    const tokens = seg.match(/[가-??{2,6}/g) || [];    tokens.sort((a, b) => b.length - a.length);    return (tokens[0] || '').replace(/??/, '');  }    export function extractName(raw: string) {    const text = sanitize(raw);    const TRIG = /(?:??s*)??�름\s*(?:?�|??:)?\s*/i;    const STOP = /(?!^)[\n,.\-!???'??\]} ]|?�니???�에???�라�??�고|?�구???�라�?/i; // 멈춤 지??    const re = new RegExp(TRIG.source + '([\\s\\S]{0,30}?)' + STOP.source, 'i');    const m = text.match(re);    const seg = m ? m[1] : '';    const value = pickHangulName(seg);    return { value, ok: !!value, text, seg };  }    function normalizeEmailTokens(s: string) {    const PROVIDER_KO: Record<string, string> = {      '지메일':'gmail','지 메일':'gmail','g메일':'gmail','gmail':'gmail',      '?�이�?:'naver','?�이�?:'naver','naver':'naver','?�음':'daum','?�메??:'hanmail',      '카카??:'kakao','카카?�메??:'kakao','?�후':'yahoo','?�메??:'hotmail','??메일':'hotmail',      'outlook':'outlook'    };    const TLD_KO: Record<string, string> = {      '�?:'com','�?:'com','?�컴':'com','com':'com','??:'net','org':'org','?�알지':'org','?��???:'org',      '케?�알':'kr','kr':'kr','�?:'co','?�오':'co'    };      s = s      .replace(/�?s*�?s*??골뱅????at/gi, ' @ ')      .replace(/?????�트|dot/gi, ' . ')      .replace(/(??s*�?s*(?:?????\s*(?:????�?�?|??s*�??�멜|�?s*??메일)/gi, ' ?�메??')      .replace(/?�메??메일|주소|?�|???�니???�에??말할�??�시/gi, ' ');      for (const [k, v] of Object.entries(PROVIDER_KO)) s = s.replace(new RegExp(k, 'gi'), ' ' + v + ' ');    for (const [k, v] of Object.entries(TLD_KO)) s = s.replace(new RegExp(k, 'gi'), ' ' + v + ' ');      return s.replace(/\s+/g, ' ').trim();  }    export function extractEmail(raw: string) {    const STOP = /(?�화|번호|비�?번호|비번|?�름|???�니???�에???�시 �??�질�?/i;    const TRIG = '(?:??\s*�?\s*(?:?????\\s*(?:????�?�?|??\s*�??�멜|�?\s*??메일)\\s*(?:?�|????:)?\\s*';    const re = new RegExp(TRIG + '([\\s\\S]{0,120}?)(?=' + STOP.source + '|$)', 'i');    const m = raw.match(re);    const seg = m?.[1] ?? raw;      const s = normalizeEmailTokens(seg);    const em = s.match(/([A-Za-z0-9._\-\s]+)\s*@\s*([A-Za-z0-9\-]+)\s*\.\s*([A-Za-z]{2,})/);    if (!em) return { value: '', ok: false, s };    const id = em[1].replace(/[\s.]/g, '').toLowerCase();    return { value: `${id}@${em[2].toLowerCase()}.${em[3].toLowerCase()}`, ok: true, s };  }  
