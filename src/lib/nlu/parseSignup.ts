import { normalizeKoSpeech } from "./koSpeechNormalizer";export type Parsed = { name?: string; email?: string; phone?: string; password?: string; };// ====== ?ïÍµê???åÏÑú Íµ¨ÌòÑ ======// ?úÍ? ?´Ïûê/?ÅÎ¨∏ ?åÏ∞® ???§Ï†ú Î¨∏Ïûêconst KO_NUM = { Í≥? "0", ?? "0", Îπ? "0", ?? "1", ?? "2", ?? "3", ?? "4", ?? "5", ?? "6", Î•? "6", Ïπ? "7", ?? "8", Íµ? "9" };const KO_ABC = { ?êÏù¥:"a", Îπ?"b", ??"c", ??"d", ??"e", ?êÌîÑ:"f", ÏßÄ:"g", ?êÏù¥Ïπ?"h", ?ÑÏù¥:"i", ?úÏù¥:"j",  ÏºÄ??"k", ??"l", ??"m", ??"n", ??"o", ??"p", ??"q", ?ÑÎ•¥:"r", ?êÏä§:"s", ??"t", ??"u",  Î∏åÏù¥:"v", ?îÎ∏î??"w", ?ëÏä§:"x", ?Ä??"y", ÏßÄ??"z" }; // ?ÑÏöî????™©Îß??®ÎèÑ ??const collapseHangul = (s:string) =>  s.replace(/([Í∞Ä-??)\s+(?=[Í∞Ä-??)/g, "$1"); // ?úÍ? Í∏Ä???¨Ïù¥ Î∂àÌïÑ?îÌïú Í≥µÎ∞± ?úÍ±∞const toDigits = (s:string) =>  collapseHangul(s)    .replace(/[^\dÍ∞Ä-??/g, "")    .replace(/[Í∞Ä-??/g, ch => KO_NUM[ch as keyof typeof KO_NUM] ?? "")    .replace(/\D/g, "");const normalizePassword = (s:string) => {  const tokens = s.trim()    .replace(/[.,Ôº?/g, " ")    .split(/\s+/)    .map(t => KO_ABC[t as keyof typeof KO_ABC] ?? t);  // ?ÑÏñ¥?ΩÍ∏∞ Ï≤òÎ¶¨: a b c 1 2 3 4 ??abc1234  return collapseHangul(tokens.join(""));};export function parseSignupUtterance(raw: string) {  const text = raw.trim();  // 1) ?¥Î¶Ñ: "?¥Î¶Ñ?Ä ??, "?Ä????ù¥Í≥??ÖÎãà?? ?®ÌÑ¥ + ?ÑÏ≤òÎ¶?  let name: string | undefined;  const reNameA = /(?:?¥Î¶Ñ\s*(?:?Ä|???|??s*?¥Î¶Ñ\s*(?:?Ä|???|?Ä??\s*([Í∞Ä-??s]{2,6})(?:(?:??Í∞Ä)?Í≥??ÖÎãà???¥Ïóê?????/;  const mA = text.match(reNameA);  if (mA) {    name = collapseHangul(mA[1])      .replace(/(?:??Í∞Ä)?Í≥?|(?:?ÖÎãà???¥Ïóê????$|??|??/g, "") // ?ëÎ? ?úÍ±∞      .trim();    if (!/^[Í∞Ä-??{2,4}$/.test(name)) name = undefined; // Í≥ºÎèÑ Ï∂îÏ∂ú Î∞©Ï?  }  // 2) ?¥Î©î?? Í∞Ä??Í∏??¥Î©î???òÎÇò  const emails = [...text.matchAll(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi)].map(x=>x[0]);  const email = emails.sort((a,b)=>b.length-a.length)[0];  // 3) ?ÑÌôîÎ≤àÌò∏: 10~11?êÎ¶¨ ÏµúÏû•Ïπ?  const digits = toDigits(text);  let phone: string | undefined;  const phoneCandidates = [...digits.matchAll(/\d{10,11}/g)].map(m=>m[0]);  const best = phoneCandidates.sort((a,b)=>b.length-a.length)[0];  if (best) phone = best.length===11 ? `${best.slice(0,3)}-${best.slice(3,7)}-${best.slice(7)}` :                                      `${best.slice(0,3)}-${best.slice(3,6)}-${best.slice(6)}`;  // 4) ÎπÑÎ?Î≤àÌò∏: "ÎπÑÎ?Î≤àÌò∏???? ?¥ÌõÑ ?†ÌÅ∞ ?¥ÏÑù  let password: string | undefined;  const mPw = text.match(/ÎπÑÎ?Î≤àÌò∏\s*(?:??:)?\s*([^\n\r]+)/);  if (mPw) {    const rawPw = mPw[1].replace(/^(?Ä|??\s*/, "");    const normalized = normalizePassword(rawPw).replace(/\s+/g, "");    if (normalized) password = normalized;  }  return { name, email, phone, password };} 
