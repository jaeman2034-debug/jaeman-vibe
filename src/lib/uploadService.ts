import { ref, uploadBytes, getDownloadURL } from "firebase/storage";import { collection, addDoc, serverTimestamp } from "firebase/firestore";import { storage, db, auth } from "@/lib/firebase";     // ??getStorage() 직접 ?�출 금�?import { getCurrentLocation } from "@/features/location/locationService";export type UploadedFile = { file: File; url: string };const BUCKET = 'jaeman-vibe-platform.appspot.com';// ??Storage 버킷 ?�인 로그 추�?console.log("[UPLOAD SERVICE] Storage instance bucket:", storage.app.options.storageBucket);console.log("[UPLOAD SERVICE] Storage instance:", storage);console.log("[UPLOAD SERVICE] BUCKET constant:", BUCKET);// ?��?지 ?�로??(Storage) - contentType 추�? �?market/ 경로 ?�정export async function uploadImages(files: File[], folder: string): Promise<string[]> {  const uploadPromises = files.map(async (file) => {    // 규칙: market/**, ?��?지, 5MB ?�하    if (!file.type.startsWith("image/")) {      throw new Error(`?��?지 ?�???�님: ${file.name} (${file.type})`);    }    if (file.size > 5 * 1024 * 1024) {      throw new Error(`5MB 초과: ${file.name} (${(file.size/1024/1024).toFixed(2)}MB)`);    }    const fileName = `${crypto.randomUUID()}-${file.name}`;    // ??gs:// ?�경로�?ref ?�성    const full = `gs://${BUCKET}/${folder}/${fileName}`;    const storageRef = ref(storage, full);        try {      // ??contentType ?�수 - CORS 문제 ?�결      const snapshot = await uploadBytes(storageRef, file, { contentType: file.type });      const downloadURL = await getDownloadURL(snapshot.ref);      return downloadURL;    } catch (error) {      console.error("Image upload failed:", error);      throw new Error(`?��?지 ?�로???�패: ${file.name}`);    }  });  return Promise.all(uploadPromises);}// 마켓 ?�용 ?��?지 ?�로???�수 추�?export async function uploadMarketImages(files: File[]): Promise<string[]> {  const urls: string[] = [];  for (const file of files) {    // 규칙: market/**, ?��?지, 5MB ?�하    if (!file.type.startsWith("image/")) {      throw new Error(`?��?지 ?�???�님: ${file.name} (${file.type})`);    }    if (file.size > 5 * 1024 * 1024) {      throw new Error(`5MB 초과: ${file.name} (${(file.size/1024/1024).toFixed(2)}MB)`);    }    const key = `market/${crypto.randomUUID()}-${file.name}`;    // ??gs:// ?�경로�?ref ?�성    const full = `gs://${BUCKET}/${key}`;    const storageRef = ref(storage, full);    // ?�버�?로그 추�?    console.log("[UPLOAD] file:", file.name, file.type, (file.size/1024/1024).toFixed(2)+"MB");    console.log("[UPLOAD] storage path:", key);    console.log("[UPLOAD] full gs path:", full);    console.log("[UPLOAD] storage instance:", !!storage);    console.log("[UPLOAD] auth current user:", !!auth.currentUser);    try {      // ???�바�?버킷 ?�용?�로 CORS 문제 ?�결      console.log("[UPLOAD] Starting uploadBytes...");      const uploadOptions = {        contentType: file.type      };            console.log("[UPLOAD] Upload options:", uploadOptions);            await uploadBytes(storageRef, file, uploadOptions)        .then((snapshot) => {          console.log("[UPLOAD] uploadBytes success:", snapshot);        })        .catch((e) => {          console.error("[UPLOAD ERROR]", {            name: file.name,            type: file.type,            size: file.size,            path: key,            fullGsPath: full,            error: e.message,            code: e.code          }, e);          throw e;        });      console.log("[UPLOAD] Getting download URL...");      const url = await getDownloadURL(storageRef);      console.log("[UPLOAD SUCCESS]", file.name, "??, url);      urls.push(url);    } catch (error: any) {      console.error("[UPLOAD FAILED]", file.name, error);            // ?�반?�인 ?�로???�류 처리      if (error.code === 'storage/unauthorized') {        console.error("[AUTH ERROR] Firebase Storage 권한???�습?�다!");        throw new Error(`권한 ?�류: 로그?�이 ?�요?�니??`);      }            throw new Error(`?��?지 ?�로???�패: ${file.name} - ${error.message || error}`);    }  }  return urls;}// ?�품 ?�록 (Storage + Firestore) - products 컬렉???�용export async function createProduct(data: {  title: string;  price: number;  category: string;  desc: string;  location?: string;  lat?: number;  lng?: number;  images: File[];  sellerId: string; // ?�수: ?�매??UID}) {  try {    // 1. ?��?지 ?�로??    const imageUrls = await uploadImages(data.images, "products");        // ?�� ?�재 ?�치 가?�오�?(lat/lng???�으�??�동?�로 가?�옴)    let currentLocation = null;    if (!data.lat || !data.lng) {      try {        currentLocation = await getCurrentLocation();        console.log("[CREATE] ?�재 ?�치 ?�동 가?�옴:", currentLocation);      } catch (error) {        console.warn("[CREATE] ?�치 가?�오�??�패:", error);      }    }        // 2. Firestore 문서 ?�성 (products 컬렉??    const docRef = await addDoc(collection(db, "products"), {      sellerId: data.sellerId,        // ?�수: ?�매??UID      title: data.title,              // ?�수: ?�품�?      price: data.price,              // ?�수: 가�?      status: '?�매�? as const,      // ?�수: ?�태 (기본�? ?�매�?            // ?�택???�드      category: data.category,      desc: data.desc,      location: data.location,      // ?�� 좌표 ?�보 (?�달받�? �??�선, ?�으�??�재 ?�치)      lat: data.lat || (currentLocation?.lat ?? null),      lng: data.lng || (currentLocation?.lng ?? null),      // ?�� ?�재 ?�치�?loc ?�드로도 ?�??(?�정??처리??      loc: (data.lat && data.lng) ? { lat: data.lat, lng: data.lng } :            (currentLocation ? { lat: currentLocation.lat, lng: currentLocation.lng } : null),      images: imageUrls,            // ?�� 기본 주소 ?�태 ?�정      addr: {        hjdStatus: 'pending' as const      },            // 메�??�이??      createdAt: serverTimestamp(),      updatedAt: serverTimestamp(),      views: 0,      likes: 0,    });    return { id: docRef.id, imageUrls };  } catch (error) {    console.error("Product creation failed:", error);    throw error;  }}// 마켓 ?�품 ?�록 (backward compatibility)export async function createMarketItem(data: {  title: string;  price: number;  category: string;  desc: string;  location?: string;  lat?: number;  lng?: number;  images: File[];}) {  // sellerId가 ?�으�??�재 로그?�된 ?�용???�용  if (!auth.currentUser) {    throw new Error("로그?�이 ?�요?�니??");  }    return createProduct({    ...data,    sellerId: auth.currentUser.uid  });}// 구인구직 공고 ?�록export async function createJobPosting(data: {  role: string;  org: string;  location: string;  pay?: string;  desc: string;  lat: number;  lng: number;  images: File[];}) {  try {    // 1. ?��?지 ?�로??(?�택??    const imageUrls = data.images.length > 0       ? await uploadImages(data.images, "jobs")      : [];        // 2. Firestore 문서 ?�성    const docRef = await addDoc(collection(db, "jobs"), {      ...data,      images: imageUrls,      createdAt: serverTimestamp(),      updatedAt: serverTimestamp(),      status: "active", // active, closed, filled      views: 0,      applications: 0,    });    return { id: docRef.id, imageUrls };  } catch (error) {    console.error("Job posting creation failed:", error);    throw error;  }}// 모임 ?�성export async function createGroup(data: {  name: string;  schedule: string;  place: string;  desc: string;  lat: number;  lng: number;  images: File[];}) {  try {    // 1. ?��?지 ?�로??(?�택??    const imageUrls = data.images.length > 0       ? await uploadImages(data.images, "groups")      : [];        // 2. Firestore 문서 ?�성    const docRef = await addDoc(collection(db, "groups"), {      ...data,      images: imageUrls,      createdAt: serverTimestamp(),      updatedAt: serverTimestamp(),      status: "active", // active, full, cancelled      members: 0,      maxMembers: 20, // 기본�?      views: 0,    });    return { id: docRef.id, imageUrls };  } catch (error) {    console.error("Group creation failed:", error);    throw error;  }}// 채팅 관???�수??export async function createChatThread(data: {  productId: string;  buyerUid: string;  sellerUid: string;  initialMessage?: string;  productTitle?: string;  productImage?: string;  productPrice?: number;}) {  try {    const threadRef = await addDoc(collection(db, "threads"), {      members: [data.buyerUid, data.sellerUid],      productId: data.productId,      status: 'negotiating' as const,      lastMessage: data.initialMessage || '',      lastMessageAt: serverTimestamp(),      createdAt: serverTimestamp(),      productTitle: data.productTitle,      productImage: data.productImage,      productPrice: data.productPrice,    });    // 초기 메시지가 ?�으�?메시지???�성    if (data.initialMessage) {      await addDoc(collection(db, "threads", threadRef.id, "messages"), {        threadId: threadRef.id,        senderId: data.buyerUid,        content: data.initialMessage,        type: 'text' as const,        createdAt: serverTimestamp(),      });    }    return { id: threadRef.id };  } catch (error) {    console.error("Chat thread creation failed:", error);    throw error;  }}export async function sendMessage(data: {  threadId: string;  content: string;  type: 'text' | 'image' | 'offer';  imageUrl?: string;  offerAmount?: number;}) {  if (!auth.currentUser) {    throw new Error("로그?�이 ?�요?�니??");  }  try {    const messageRef = await addDoc(collection(db, "threads", data.threadId, "messages"), {      threadId: data.threadId,      senderId: auth.currentUser.uid,      content: data.content,      type: data.type,      imageUrl: data.imageUrl,      offerAmount: data.offerAmount,      createdAt: serverTimestamp(),    });    // 채팅방의 마�?�?메시지 ?�보 ?�데?�트    const { doc, updateDoc } = await import('firebase/firestore');    await updateDoc(doc(db, "threads", data.threadId), {      lastMessage: data.content,      lastMessageAt: serverTimestamp(),    });    return { id: messageRef.id };  } catch (error) {    console.error("Message sending failed:", error);    throw error;  }}// ?�일 ?�기 �??�??검�?export function validateFile(file: File): { valid: boolean; error?: string } {  const maxSize = 5 * 1024 * 1024; // 5MB  const allowedTypes = ["image/jpeg", "image/png", "image/webp"];    if (file.size > maxSize) {    return { valid: false, error: "?�일 ?�기??5MB ?�하?�야 ?�니??" };  }    if (!allowedTypes.includes(file.type)) {    return { valid: false, error: "JPG, PNG, WebP ?�일�??�로??가?�합?�다." };  }    return { valid: true };}// ?�러 ?�일 검�?export function validateFiles(files: File[]): { valid: boolean; errors: string[] } {  const errors: string[] = [];    files.forEach((file, index) => {    const result = validateFile(file);    if (!result.valid) {      errors.push(`?�일 ${index + 1}: ${result.error}`);    }  });    return {    valid: errors.length === 0,    errors  };}
