/** * 공통 ?�틸리티 ?�수?? */ /** * ?��?지 URL 백필 ?�틸리티 (기본) * 기존 Firestore 문서???��?지 ?�드�??�로??구조�??�데?�트 */ export async function backfillImageUrls() { console.log('[백필] ?��?지 URL 백필 ?�작...'); try {
    const { db } = await import('@/lib/firebase');
    const { collection, getDocs, updateDoc, doc } = await import('firebase/firestore');
    const snapshot = await getDocs(collection(db, 'products'));
    let updatedCount = 0;
    let errorCount = 0;
    for (const docSnapshot of snapshot.docs) {
        const data = docSnapshot.data();
        try { }
        finally { }
    }
}
finally { } } // ?��?지 ?�드가 ?�고 �?번째 ?��?지가 ?�순 URL 문자?�인 경우        if (Array.isArray(data.images) && data.images.length > 0) {          const firstImage = data.images[0];                    if (typeof firstImage === 'string') {            // ???�순 URL 배열??구조?�된 ?��?지 ?�이?�로 변??            const imageData = data.images.map((url: string, index: number) => ({              url,              path: `products/${data.sellerId || 'unknown'}/${docSnapshot.id}_${index}.jpg`,              filename: `image_${index}.jpg`,              size: 0,              type: 'image/jpeg',              uploadedAt: new Date()            }));            // ??문서 ?�데?�트            await updateDoc(doc(db, 'products', docSnapshot.id), {              images: imageData,              imageUrls: data.images,  // 기존 ?�환???��?              thumbnail: data.images[0], // �?번째 ?��?지�??�네?�로              updatedAt: new Date()            });            updatedCount++;            console.log(`[백필] ${docSnapshot.id} ?�데?�트 ?�료`);          }        }        // ??thumbnail?�나 imageUrls가 ?�는 경우 기본�??�정        else if (!data.thumbnail && !data.imageUrls) {          await updateDoc(doc(db, 'products', docSnapshot.id), {            images: [],            imageUrls: [],            thumbnail: "",            updatedAt: new Date()          });                    updatedCount++;          console.log(`[백필] ${docSnapshot.id} 기본�??�정 ?�료`);        }      } catch (error) {        console.error(`[백필] ${docSnapshot.id} ?�데?�트 ?�패:`, error);        errorCount++;      }    }    console.log(`[백필] ?�료: ${updatedCount}�?문서 ?�데?�트, ${errorCount}�??�패`);        if (updatedCount > 0) {      alert(`백필 ?�료!\n${updatedCount}�?문서 ?�데?�트??n${errorCount}�??�패`);    } else {      alert('?�데?�트??문서가 ?�습?�다.');    }      } catch (error) {    console.error('[백필] 백필 ?�패:', error);    alert('백필 �??�류가 발생?�습?�다.');  }}/** * 기존 문서 백필 (?��?지 URL ?�는 문서 보정) * imagePath, storagePath�??�용?�여 ?�제 ?�운로드 URL ?�성 * ??번만 ?�행?�여 �?문서?�에 URL??채워 ?�는 ?�수 */export async function backfillProductImages() {  console.log('[백필] 기존 문서 ?��?지 URL 백필 ?�작...');    try {    const { db } = await import('@/lib/firebase');    const { storage } = await import('@/lib/firebase');    const { collection, getDocs, doc, updateDoc } = await import('firebase/firestore');    const { ref, getDownloadURL } = await import('firebase/storage');    const snap = await getDocs(collection(db, "products"));    let updatedCount = 0;    let skippedCount = 0;    let errorCount = 0;    for (const d of snap.docs) {      const data = d.data() as any;      // ???��? ?�상 구조�??�킵      if (Array.isArray(data.images) && data.images[0]?.url) {        skippedCount++;        continue;      }      // ??과거???�겨??path ?��? ?�다�?그걸 ?�용      const path = data.imagePath || data.storagePath || data.path;      if (!path) {        skippedCount++;        continue;      }      try {        // ??Storage?�서 ?�제 ?�운로드 URL ?�성        const url = await getDownloadURL(ref(storage, path));                // ??문서 ?�데?�트        await updateDoc(doc(db, "products", d.id), {          images: [{             url,             path,            filename: path.split('/').pop() || 'image.jpg',            size: 0,            type: 'image/jpeg',            uploadedAt: new Date()          }],          imageUrls: [url],  // 기존 ?�환???��?          thumbnail: url,    // �?번째 ?��?지�??�네?�로          updatedAt: new Date()        });                updatedCount++;        console.log(`??fixed: ${d.id} (${path})`);      } catch (e) {        console.warn(`?�️ skip ${d.id}:`, e);        errorCount++;      }    }    console.log(`[백필] ?�료: ${updatedCount}�??�정, ${skippedCount}�??�킵, ${errorCount}�??�패`);        if (updatedCount > 0) {      alert(`백필 ?�료!\n??${updatedCount}�?문서 ?�정??n??�� ${skippedCount}�??�킵??n??${errorCount}�??�패`);    } else {      alert('?�정??문서가 ?�습?�다.');    }      } catch (error) {    console.error('[백필] 백필 ?�패:', error);    alert('백필 �??�류가 발생?�습?�다.');  }}/** * ?��?지 URL ?�효??검?? * @param url ?��?지 URL * @returns ?�효??URL?��? ?��? */export function isValidImageUrl(url: string): boolean {  if (!url) return false;    // gs:// URL?� ?�효?��? ?�음 (getDownloadURL ?�요)  if (url.startsWith('gs://')) return false;    // https:// URL�??�효  if (url.startsWith('https://')) return true;    // ?��? 경로???�용 (로컬 개발??  if (url.startsWith('/') || url.startsWith('./')) return true;    return false;}/** * ?��?지 ?�드 ?�규?? * @param images ?��?지 ?�이??(?�양???�태 지?? * @returns ?�규?�된 ?��?지 URL 배열 */export function normalizeImageUrls(images: any): string[] {  if (!images) return [];    if (Array.isArray(images)) {    return images.map(img => {      if (typeof img === 'string') return img;      if (typeof img === 'object' && img?.url) return img.url;      return null;    }).filter(Boolean);  }    return [];}/** * 마이그레?�션: market ??products 컬렉???�동 * market??모든 문서�?products�?복사?�고 빠진 ?�드 채우�? */export async function migrateMarketToProducts() {  console.log('[마이그레?�션] market ??products ?�작...');    try {    const { db } = await import('@/lib/firebase');    const { storage } = await import('@/lib/firebase');    const { collection, getDocs, addDoc, serverTimestamp } = await import('firebase/firestore');    const { ref, getDownloadURL } = await import('firebase/storage');    const snap = await getDocs(collection(db, "market"));    let migratedCount = 0;    let errorCount = 0;    for (const d of snap.docs) {      try {        const x = d.data() as any;                // ???��?지 URL/경로 추출        const path = x?.images?.[0]?.path || x?.imagePath || null;        let url = x?.images?.[0]?.url || x?.imageUrl || null;                // ??경로가 ?��?�?URL???�으�?Storage?�서 ?�운로드 URL ?�성        if (!url && path) {          try {             url = await getDownloadURL(ref(storage, path));           } catch (e) {            console.warn(`[마이그레?�션] ${d.id} ?��?지 URL ?�성 ?�패:`, e);          }        }        // ??products 컬렉?�에 ??문서 ?�성        await addDoc(collection(db, "products"), {          title: x.title ?? "",          category: x.category ?? "기�?",          description: x.description ?? "",          price: typeof x.price === "number" ? x.price : Number(x.price ?? 0),          images: url ? [{             url,             path: path ?? null,            filename: path?.split('/').pop() || 'image.jpg',            size: 0,            type: 'image/jpeg',            uploadedAt: new Date()          }] : [],          imageUrls: url ? [url] : [],          thumbnail: url || "",          status: x.status ?? "?�매�?,          sellerId: x.sellerId || x.sellerUid || "unknown",          location: x.location || x.geo,          address: x.address,          sellerStats: x.sellerStats,          chatCount: x.chatCount ?? 0,          likeCount: x.likeCount ?? 0,          viewCount: x.viewCount ?? 0,          createdAt: x.createdAt ?? serverTimestamp(),          updatedAt: serverTimestamp(),          migratedFrom: 'market',          originalId: d.id        });        migratedCount++;        console.log(`??마이그레?�션 ?�료: ${d.id} ??products`);              } catch (error) {        console.error(`??마이그레?�션 ?�패: ${d.id}`, error);        errorCount++;      }    }    console.log(`[마이그레?�션] ?�료: ${migratedCount}�??�동, ${errorCount}�??�패`);        if (migratedCount > 0) {      alert(`마이그레?�션 ?�료!\n??${migratedCount}�?문서 ?�동??n??${errorCount}�??�패`);    } else {      alert('마이그레?�션??문서가 ?�습?�다.');    }      } catch (error) {    console.error('[마이그레?�션] 마이그레?�션 ?�패:', error);    alert('마이그레?�션 �??�류가 발생?�습?�다.');  }}// 개발 ?�경?�서 ?�역 ?�수�??�록if (import.meta.env.DEV) {  (window as any).backfillImageUrls = backfillImageUrls;  (window as any).backfillProductImages = backfillProductImages;  (window as any).migrateMarketToProducts = migrateMarketToProducts;  console.log('[백필/마이그레?�션] ?�역 ?�수 ?�록??');  console.log('  - window.backfillImageUrls() : 기본 백필');  console.log('  - window.backfillProductImages() : 기존 문서 ?��?지 URL 백필');  console.log('  - window.migrateMarketToProducts() : market ??products 마이그레?�션');}
