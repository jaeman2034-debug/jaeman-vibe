import { getFirestore, collection, query, where, limit, getDocs } from "firebase/firestore"; /** * data.id�???��??(?�전 코드 ?�환?? * products, market 컬렉?�에??data.id ?�드가 ?�치?�는 문서 찾기 */
async function reverseLookupByDataId(badId) { const db = getFirestore(); const qs = [query(collection(db, "products"), where("id", "==", badId), limit(1)), query(collection(db, "market"), where("id", "==", badId), limit(1)),]; for (const q of qs) {
    const s = await getDocs(q);
    if (!s.empty)
        return s.docs[0].id;
} } // ?�제 문서 ID  }  return null;}/** * ?�품 ?�세 ?�이지 로더 * ?�버 ?�이?�에??리다?�렉?��? 체크?�고 처리 */export async function productDetailLoader({ params }: LoaderFunctionArgs) {  const id = params.id;    if (!id) {    throw new Error("?�품 ID가 ?�요?�니??");  }  // ???�수??ID �?처리  if (id === "create" || id === "new") {    console.log("[LOADER] ?�수 ID 감�?, ?�록 ?�이지�?리다?�렉??", id);    throw redirect("/market/create");  }  try {    const db = getFirestore();        // ??리다?�렉??체크 (ID가 변경된 경우)    console.log(`[LOADER] 리다?�렉??체크: ${id}`);    const rSnap = await getDoc(doc(db, "redirects", id));        if (rSnap.exists()) {      const to = (rSnap.data() as any)?.to as string | undefined;      if (to && to !== id) {        console.log(`[LOADER] 리다?�렉??발견: ${id} ??${to}`);        throw redirect(`/market/${to}`);      }    }        // ??리다?�렉?��? ?�으�??�백 체크 ?�작    console.log(`[LOADER] ?�백 체크 ?�작: ${id}`);        // 1️⃣ products?�서 ?�품 ?�인    const productSnap = await getDoc(doc(db, "products", id));    if (productSnap.exists()) {      console.log(`[LOADER] products?�서 ?�품 발견: ${id}`);      return null; // 컴포?�트?�서 loadItem ?�출    }        // 2️⃣ market?�서 ?�품 ?�인    const marketSnap = await getDoc(doc(db, "market", id));    if (marketSnap.exists()) {      console.log(`[LOADER] market?�서 ?�품 발견: ${id}`);      return null; // 컴포?�트?�서 loadItem ?�출    }        // 3️⃣ data.id ??��??(?�전 코드 ?�환)    console.log(`[LOADER] data.id ??��???�도: ${id}`);    const real = await reverseLookupByDataId(id);    if (real) {      console.log(`[LOADER] ??��???�공: ${id} ??${real}`);      throw redirect(`/market/${real}`, {         replace: true,         state: { redirectedFrom: id, fixedBy: "data.id" }       });    }        // 4️⃣ 최종 404    console.log(`[LOADER] 모든 ?�백 ?�패, 404: ${id}`);    throw new Response("?�품??찾을 ???�습?�다.", { status: 404 });      } catch (error) {    if (error instanceof Response) {      // redirect()�??�한 ?�러??그�?�??�파      throw error;    }        console.warn(`[LOADER] 리다?�렉??체크 ?�패:`, error);    // 리다?�렉??체크 ?�패?�도 계속 진행    return null;  }}
