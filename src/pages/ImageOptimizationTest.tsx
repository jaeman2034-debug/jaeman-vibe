import React, { useState } from 'react';import {   removeBackgroundAndResize,   calculateImageQuality,   convertImageFormat,  extractImageMetadata } from '../lib/backgroundRemovalUtils';import AdvancedImageUpload from '../components/upload/AdvancedImageUpload';export default function ImageOptimizationTest() {  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);  const [processedFiles, setProcessedFiles] = useState<File[]>([]);  const [isProcessing, setIsProcessing] = useState(false);  const [results, setResults] = useState<any[]>([]);  const handleImagesSelected = (files: File[]) => {    setSelectedFiles(files);  };  const processImages = async () => {    if (selectedFiles.length === 0) return;    setIsProcessing(true);    const newResults = [];    try {      for (const file of selectedFiles) {        console.log(`Ï≤òÎ¶¨ Ï§? ${file.name}`);                // Î©îÌ??∞Ïù¥??Ï∂îÏ∂ú        const metadata = await extractImageMetadata(file);                // ?àÏßà ?êÏàò Í≥ÑÏÇ∞        const qualityScore = await calculateImageQuality(file);                // Î∞∞Í≤Ω ?úÍ±∞ + Î¶¨ÏÇ¨?¥Ï¶à        const backgroundRemovalResult = await removeBackgroundAndResize(file);                // ?¨Îß∑ Î≥Ä??(WebP)        const webpFile = await convertImageFormat(file, 'webp', 0.9);                // ?¨Îß∑ Î≥Ä??(AVIF)        const avifFile = await convertImageFormat(file, 'avif', 0.9);        newResults.push({          original: file,          metadata,          qualityScore,          backgroundRemoval: backgroundRemovalResult,          webp: webpFile,          avif: avifFile        });      }      setProcessedFiles(selectedFiles);      setResults(newResults);          } catch (error) {      console.error('?¥Î?ÏßÄ Ï≤òÎ¶¨ ?§Ìå®:', error);    } finally {      setIsProcessing(false);    }  };  return (    <div className="container mx-auto px-4 py-8">      <h1 className="text-3xl font-bold mb-8">?¥Î?ÏßÄ ÏµúÏ†Å???åÏä§??/h1>            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">        {/* ?¥Î?ÏßÄ ?ÖÎ°ú??*/}        <div>          <h2 className="text-xl font-semibold mb-4">?¥Î?ÏßÄ ?ÖÎ°ú??/h2>          <AdvancedImageUpload            onImagesSelected={handleImagesSelected}            maxFiles={5}            maxFileSize={10}            enableBackgroundRemoval={true}            enableQualityCheck={true}            qualityThreshold={70}          />                    {selectedFiles.length > 0 && (            <div className="mt-4">              <button                onClick={processImages}                disabled={isProcessing}                className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50"              >                {isProcessing ? 'Ï≤òÎ¶¨ Ï§?..' : '?¥Î?ÏßÄ ÏµúÏ†Å???úÏûë'}              </button>            </div>          )}        </div>        {/* Í≤∞Í≥º ?úÏãú */}        <div>          <h2 className="text-xl font-semibold mb-4">Ï≤òÎ¶¨ Í≤∞Í≥º</h2>                    {results.length > 0 && (            <div className="space-y-4">              {results.map((result, index) => (                <div key={index} className="border rounded-lg p-4 bg-gray-50">                  <h3 className="font-medium mb-2">{result.original.name}</h3>                                    <div className="grid grid-cols-2 gap-4 text-sm">                    <div>                      <strong>?êÎ≥∏ ?¨Í∏∞:</strong> {result.metadata.width} √ó {result.metadata.height}                    </div>                    <div>                      <strong>?åÏùº ?¨Í∏∞:</strong> {(result.metadata.size / 1024 / 1024).toFixed(2)} MB                    </div>                    <div>                      <strong>?àÏßà ?êÏàò:</strong> {(result.qualityScore * 100).toFixed(1)}%                    </div>                    <div>                      <strong>Î∞∞Í≤Ω ?úÍ±∞:</strong> {result.backgroundRemoval.success ? '?±Í≥µ' : '?§Ìå®'}                    </div>                  </div>                                    <div className="mt-3 flex space-x-2">                    <div className="text-xs">                      <strong>WebP:</strong> {(result.webp.size / 1024 / 1024).toFixed(2)} MB                    </div>                    <div className="text-xs">                      <strong>AVIF:</strong> {(result.avif.size / 1024 / 1024).toFixed(2)} MB                    </div>                  </div>                </div>              ))}            </div>          )}                    {isProcessing && (            <div className="text-center py-8">              <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4"></div>              <p className="text-gray-600">?¥Î?ÏßÄÎ•?Ï≤òÎ¶¨?òÍ≥† ?àÏäµ?àÎã§...</p>            </div>          )}        </div>      </div>    </div>  );} 
