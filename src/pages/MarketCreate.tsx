import { useState, useEffect, useCallback } from "react";import { useNavigate } from "react-router-dom";import { createMarketItem } from "@/lib/collections";import { uploadMarketImages } from "@/lib/uploadService";import ImageUploader, { Uploaded } from "@/components/ImageUploader";import { auth, googleProvider } from "@/lib/firebase";import { signInWithPopup } from "firebase/auth";import { autoReverseGeocoding, GeocodingResult } from "@/utils/geocoding";import useGeolocation from "@/hooks/useGeolocation";import { reverseGeocodeDong } from "@/lib/geo";export default function MarketCreate() {  const nav = useNavigate();  const [form, setForm] = useState({    title: "",    price: "",    category: "",    desc: "",    location: "",    lat: "",    lng: ""  });  // ???��? 'images'?�는 ?�름???�태/객체�??�을 묶�? 마세??  // ?�일 ?�태??photos 같�? ?�른 ?�름???�고,  const [photos, setPhotos] = useState<{file: File; preview: string}[]>([]);  const [loading, setLoading] = useState(false);  const [locationLoading, setLocationLoading] = useState(false);    // useGeolocation ???�용  const { coords: userLocation, requestPermission } = useGeolocation();  // photos state 변�?감�?  useEffect(() => {    console.log("[MARKET_CREATE] photos state changed:", photos.length, photos.map(p => ({ name: p.file.name, size: p.file.size })));  }, [photos]);  const onChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {    setForm(prev => ({ ...prev, [e.target.name]: e.target.value }));  };  // ?�치 ?�동 채우�?(????�코???�함)  const useMyLocation = async () => {    if (!userLocation) {      // ?�치 권한 ?�청      await requestPermission();      return;    }    setLocationLoading(true);    try {      // ????�코?�으�?주소 ?�보 가?�오�?      const geocodingResult = await autoReverseGeocoding(        userLocation.lat,        userLocation.lng,        import.meta.env.VITE_KAKAO_REST_API_KEY,        import.meta.env.VITE_GOOGLE_MAPS_API_KEY      );      if (geocodingResult) {        setForm(prev => ({          ...prev,          lat: String(geocodingResult.lat),          lng: String(geocodingResult.lng),          location: geocodingResult.placeName || geocodingResult.address        }));                console.log('[LOCATION] ?�치 ?�동 채우�??�료:', geocodingResult);      }    } catch (error) {      console.error('[LOCATION] ????�코???�류:', error);      // 기본 좌표�??�정      setForm(prev => ({        ...prev,        lat: String(userLocation.lat),        lng: String(userLocation.lng)      }));    } finally {      setLocationLoading(false);    }  };  // ??useCallback?�로 감싸�?photos�??�존??배열??추�?  const onSubmit = useCallback(async (e: React.FormEvent) => {    e.preventDefault(); // ??form 기본 ?�작 막기    if (loading) return;        console.log("?? [SUBMIT] ?�작");        // ?�� ?�버�? onSubmit ?�작 ??photos ?�태 ?�인    console.log("[SUBMIT] photos:", photos, photos.length);    console.log("[SUBMIT] photos length:", photos.length);    console.log("[SUBMIT] names:", photos.map(p => p.file.name));    console.log("[SUBMIT] photos type:", typeof photos);    console.log("[SUBMIT] photos isArray:", Array.isArray(photos));        // ?�일 검�?    if (photos.length === 0) {      alert("?��?지�??�택?�세??);      return;    }        setLoading(true);    console.log("?�� [SUBMIT] 로딩 ?�작");    try {      // 1) 로그??보장 (규칙??auth ?�요?�면 ?�수)      console.log("?�� [SUBMIT] 로그???�태 ?�인:", !!auth.currentUser);      if (!auth.currentUser) {        console.log("?�� [SUBMIT] 로그???�도");        await signInWithPopup(auth, googleProvider);        console.log("?�� [SUBMIT] 로그???�료");      }      // 1) Storage ?�로?????�운로드 URL 배열 (uploadMarketImages ?�용)      console.log("?�� [SUBMIT] ?��?지 ?�로???�작");      const files = photos.map(p => p.file);  // ???�로???�?�에 맞게 ?�정      console.log("?�� [SUBMIT] ?�로?�할 ?�일??", files.map(f => ({         name: f.name,         type: f.type,         size: (f.size/1024/1024).toFixed(2)+"MB"       })));            // ?�일 검�?로그      files.forEach((file, index) => {        console.log(`?�� [FILE ${index + 1}]`, {          name: file.name,          type: file.type,          size: (file.size/1024/1024).toFixed(2)+"MB",          isImage: file.type.startsWith("image/"),          isUnder5MB: file.size <= 5 * 1024 * 1024        });      });            const urls = await uploadMarketImages(files); // ??uploadMarketImages ?�용      console.log("?�� [SUBMIT] ?��?지 ?�로???�료:", urls);      // ?�� ?�버�? ?�로?�된 URL ?�인      console.log("[MARKET_CREATE] ?�로?�된 ?��?지 ??", photos.length);      console.log("[MARKET_CREATE] ?�성??URL 배열:", urls);      console.log("[MARKET_CREATE] URL 배열 ?�??", Array.isArray(urls) ? "배열" : typeof urls);      // 2) ?�정???�보 가?�오�?(lat/lng가 ?�는 경우)      let address = null;      if (form.lat && form.lng) {        try {          console.log("?�� [SUBMIT] ?�정???�보 가?�오�??�작");          address = await reverseGeocodeDong(Number(form.lat), Number(form.lng));          console.log("?�� [SUBMIT] ?�정???�보 ?�료:", address);        } catch (geoError) {          console.error("?�� [SUBMIT] ?�정???�보 ?�패:", geoError);          // ?�정???�보 ?�패?�도 ?�품 ?�록?� 계속 진행        }      }      // 3) Firestore?�는 'images'??URL 배열�?      console.log("?�� [SUBMIT] Firestore ?�???�작");      const productData = {        title: form.title.trim(),        desc: form.desc.trim(),        category: form.category,        price: Number(form.price),        location: form.location?.trim() || undefined,        lat: form.lat ? Number(form.lat) : null,        lng: form.lng ? Number(form.lng) : null,        images: urls,                 // ???�기가 ?��?. 감싸지 마세??        // ?�정???�보 추�?        geo: form.lat && form.lng ? {           lat: Number(form.lat),           lng: Number(form.lng)         } : null,        address: address,             // ?�시??(sido/sigungu/dong/full)        status: '?�매�?,        sellerId: auth.currentUser?.uid,        createdAt: new Date(),      };      const productRef = await createMarketItem(productData);      console.log("[MARKET_CREATE] Firestore ?�???�료:", productRef.id);      // AI 분석 ?�동 ?�행 (�?번째 ?��?지�?      if (urls.length > 0) {        try {          console.log('[AI] ?�동 분석 ?�작:', productRef.id);          const { callMockAnalyzeAPI } = await import('@/mock/api');          const analysisResult = await callMockAnalyzeAPI({            imageUrl: urls[0],            productId: productRef.id          });          // 분석 결과�?products 컬렉?�에 ?�??          const { doc, updateDoc } = await import('firebase/firestore');          const { db } = await import('@/lib/firebase');          await updateDoc(doc(db, 'products', productRef.id), {            analysis: analysisResult,            analyzedAt: new Date()          });          console.log('[AI] ?�동 분석 ?�료 �??�??', analysisResult);        } catch (analysisError) {          console.error('[AI] ?�동 분석 ?�패:', analysisError);          // 분석 ?�패?�도 ?�품 ?�록?� ?�공        }      }      // ???�로???�???�료 ?�에�?초기??      setPhotos([]);      setForm({        title: "",        price: "",        category: "",        desc: "",        location: "",        lat: "",        lng: ""      });      alert("?�록 ?�료!");      nav("/market", { replace: true });    } catch (err: any) {      console.error("??[SUBMIT] ?�류 발생:", err);      console.error("[MARKET_CREATE] error:", err, err?.code, err?.message);      alert("?�록 ?�패: " + (err?.code || err?.message || String(err)));    } finally {      setLoading(false);      console.log("?�� [SUBMIT] 로딩 종료");    }  }, [photos, loading, form, nav]); // ??photos�??�존??배열??추�?  return (    <form onSubmit={onSubmit} className="space-y-6">      <h2 className="text-2xl font-extrabold">?�품 ?�록</h2>      <div className="card space-y-4">        <div className="grid gap-4 md:grid-cols-2">          <div>            <label className="text-sm text-slate-600">?�목</label>            <input name="title" value={form.title} onChange={onChange}              placeholder="?? ?�디?�스 축구�?Pro"              className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5" required />          </div>          <div>            <label className="text-sm text-slate-600">가�???</label>            <input name="price" type="number" value={form.price} onChange={onChange}              placeholder="35000" className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5" required />          </div>          <div>            <label className="text-sm text-slate-600">카테고리</label>            <select name="category" value={form.category} onChange={onChange}              className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5 bg-white" required>              <option value="" disabled>?�택</option>              <option value="축구">축구</option>              <option value="?�구">?�구</option>              <option value="?�구">?�구</option>              <option value="?�니??>?�니??/option>              <option value="기�?">기�?</option>            </select>          </div>          <div>            <label className="text-sm text-slate-600">거래 지??/label>            <input name="location" value={form.location} onChange={onChange}              placeholder="?�울??강남�? className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5" />          </div>        </div>        <div>          <label className="text-sm text-slate-600">?�명</label>          <textarea name="desc" value={form.desc} onChange={onChange}            placeholder="?�세 ?�태, ?�용�??�을 ?�어주세??"            className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5 h-28" />        </div>        <ImageUploader           multiple           value={photos}          onChange={(next) => {            console.log("[MARKET_CREATE] photos state changed:", next.length, next);            setPhotos(next);          }}        />        {/* ?�� ?�버�? ?�재 ?�태 ?�인 (개발 모드?�서�? */}        {import.meta.env.DEV && (          <div className="card bg-blue-50 border-blue-200">            <div className="text-sm text-blue-700">              <strong>개발 모드 ?�버�?</strong>              <div>?�택???��?지: {photos.length}�?/div>              <div>photos ?�태: {JSON.stringify(photos.map(p => ({ name: p.file.name, size: p.file.size })))}</div>            </div>          </div>        )}        <div className="grid gap-4 md:grid-cols-2">          <div>            <label className="text-sm text-slate-600">?�도(lat)</label>            <input name="lat" value={form.lat} onChange={onChange}              className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5" />          </div>          <div>            <label className="text-sm text-slate-600">경도(lng)</label>            <input name="lng" value={form.lng} onChange={onChange}              className="mt-1 w-full rounded-xl border border-slate-200 px-4 py-2.5" />          </div>        </div>        <button           type="button"           onClick={useMyLocation}           disabled={locationLoading}          className="btn-ghost flex items-center gap-2"        >          {locationLoading ? (            <>              <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>              ?�치 ?�보 가?�오??�?..            </>          ) : (            <>              ?�� ?�재 ?�치�?채우�?            </>          )}        </button>        <div className="flex justify-end gap-3">          <button type="button" onClick={() => nav(-1)} className="btn-ghost">취소</button>          <button type="submit" className="btn-primary" disabled={loading}>            {loading ? "?�록 �?.." : "?�록?�기"}          </button>        </div>      </div>    </form>  );}