import { useEffect, useState } from "react";import { analyzeImageBase64 } from "@/services/aiService";import { createProductNoImage } from "@/services/productService";function fileToBase64(file: File): Promise<string> {  return new Promise((resolve, reject) => {    const fr = new FileReader();    fr.onload = () => {      const dataUrl = String(fr.result || "");      const base64 = dataUrl.split(",")[1] || ""; // "data:...;base64,XXXX"      resolve(base64);    };    fr.onerror = reject;    fr.readAsDataURL(file);  });}export default function ProductTest() {  const [title, setTitle] = useState("");  const [price, setPrice] = useState<number | "">("");  const [file, setFile] = useState<File | null>(null);  const [preview, setPreview] = useState<string | null>(null);  const [coords, setCoords] = useState<{lat:number; lng:number} | null>(null);  const [ai, setAi] = useState<any>(null);  const [loading, setLoading] = useState(false);  useEffect(() => {    navigator.geolocation.getCurrentPosition(      (pos) => setCoords({ lat: pos.coords.latitude, lng: pos.coords.longitude }),      (err) => console.warn("[GEO] failed", err),      { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }    );  }, []);  async function onPick(e: React.ChangeEvent<HTMLInputElement>) {    const f = e.target.files?.[0] || null;    setFile(f);    if (f) setPreview(URL.createObjectURL(f));  }  async function doAnalyze() {    if (!file) return alert("?¥Î?ÏßÄÎ•??†ÌÉù?òÏÑ∏??");    setLoading(true);    try {      const base64 = await fileToBase64(file);      const out = await analyzeImageBase64(base64);      setAi(out.analysis);      alert("AI Î∂ÑÏÑù ?ÑÎ£å");    } catch (e:any) {      console.error(e);      alert("AI Î∂ÑÏÑù ?§Ìå®: " + e.message);    } finally {      setLoading(false);    }  }  async function onSubmit(e: React.FormEvent) {    e.preventDefault();    if (!title || price === "" ) return alert("?úÎ™©/Í∞ÄÍ≤©ÏùÑ ?ÖÎ†•?òÏÑ∏??);    setLoading(true);    try {      const res = await createProductNoImage({        title,        price: Number(price),        location: coords ? { ...coords } : undefined,        ai,        category: ai?.category ?? null,        description: ai?.summary ?? null,      });      alert(`?±Î°ù ?ÑÎ£å: ${res.id}`);      setTitle(""); setPrice(""); setFile(null); setPreview(null); setAi(null);    } catch (e:any) {      console.error(e);      alert("?±Î°ù ?§Ìå®: " + e.message);    } finally {      setLoading(false);    }  }  return (    <div style={{ maxWidth: 560, margin: "20px auto", padding: 16 }}>      <h2>?ÅÌíà ?åÏä§??(?¥Î?ÏßÄ ?ÖÎ°ú???ÜÏù¥ ?ÑÏπò/AIÎß?</h2>      <form onSubmit={onSubmit}>        <input placeholder="?úÎ™©" value={title} onChange={e=>setTitle(e.target.value)} required />        <input type="number" placeholder="Í∞ÄÍ≤? value={price}               onChange={e=>setPrice(e.target.value===""?"":Number(e.target.value))} required />        <div style={{ margin: "8px 0" }}>          <input type="file" accept="image/*" onChange={onPick} />          {preview && <img src={preview} alt="preview" style={{ width:"100%", maxHeight: 260, objectFit:"contain", marginTop:8 }} />}        </div>        <button type="button" onClick={doAnalyze} disabled={loading || !file}>          {loading ? "Î∂ÑÏÑù Ï§?.." : "AI Î∂ÑÏÑù ?§Ìñâ"}        </button>        <button type="submit" disabled={loading} style={{ marginLeft: 8 }}>          {loading ? "?Ä??Ï§?.." : "Firestore ?Ä??}        </button>      </form>      <pre style={{ background:"#111", color:"#0f0", padding:12, marginTop:12, whiteSpace:"pre-wrap" }}>        ?ÑÏπò: {coords ? JSON.stringify(coords) : "Unavailable"}      </pre>      <pre style={{ background:"#111", color:"#0ff", padding:12, whiteSpace:"pre-wrap" }}>        AI: {ai ? JSON.stringify(ai, null, 2) : "(?ÑÏßÅ ?ÜÏùå)"}      </pre>    </div>  );} 
