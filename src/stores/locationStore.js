"use strict";
// src/stores/locationStore.tsimport { create } from 'zustand';import { getCurrentLocation } from '@/lib/locationService';type UserLocation = { lat: number; lng: number; accuracy?: number; timestamp: number } | null;export const useLocationStore = create<{  userLoc: UserLocation;  setUserLoc: (l: UserLocation) => void;  load: () => void;  clear: () => void;  fetchCurrent: () => Promise<void>;  isLoading: boolean;  error: string | null;}>(set => ({  userLoc: null,  isLoading: false,  error: null,    setUserLoc: (l) => {     if (l) {      localStorage.setItem('userLoc', JSON.stringify(l));     } else {      localStorage.removeItem('userLoc');    }    set({ userLoc: l, error: null });   },    load: () => {     try {      const raw = localStorage.getItem('userLoc');      if (raw) {        const parsed = JSON.parse(raw);        // 24?�간 ?�내???�치 ?�보�??�효        const oneDay = 24 * 60 * 60 * 1000;        if (Date.now() - parsed.timestamp < oneDay) {          set({ userLoc: parsed });          return;        }      }      // ?�효?��? ?�으�??�거      localStorage.removeItem('userLoc');      set({ userLoc: null });    } catch (error) {      console.error('?�치 ?�보 로드 ?�패:', error);      localStorage.removeItem('userLoc');      set({ userLoc: null });    }  },    clear: () => {    localStorage.removeItem('userLoc');    set({ userLoc: null, error: null });  },    fetchCurrent: async () => {    set({ isLoading: true, error: null });        try {      const location = await getCurrentLocation();      const userLocation: UserLocation = {        lat: location.lat,        lng: location.lng,        accuracy: location.accuracy,        timestamp: Date.now()      };            // localStorage???�?�하�??�태 ?�데?�트      localStorage.setItem('userLoc', JSON.stringify(userLocation));      set({ userLoc: userLocation, isLoading: false });    } catch (error) {      const errorMessage = error instanceof Error ? error.message : '?�치�?가?�올 ???�습?�다.';      set({ error: errorMessage, isLoading: false });    }  }}));// ?�치 ?�보가 ?�효?��? ?�인?�는 ?�퍼 ?�수export const isLocationValid = (location: UserLocation): boolean => {  if (!location) return false;    // 24?�간 ?�내???�치 ?�보�??�효  const oneDay = 24 * 60 * 60 * 1000;  if (Date.now() - location.timestamp > oneDay) return false;    // 좌표 ?�효??검??  return (    location.lat >= -90 && location.lat <= 90 &&    location.lng >= -180 && location.lng <= 180  );};// 기존 ?�과???�환?�을 ?�한 별칭export const useUserLocation = useLocationStore; 
