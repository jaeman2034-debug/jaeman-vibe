"use strict";
// 기존 ?�품 문서??sellerId ?�드 백필 ?�틸리티import { collection, getDocs, updateDoc, doc, serverTimestamp } from 'firebase/firestore';import { db } from '@/lib/firebase';function pickSellerIdFromDoc(p: any) {  return p?.sellerId ?? p?.seller?.uid ?? p?.ownerId ?? p?.createdBy ?? p?.uid;}export async function backfillSellerId() {  console.log('[BACKFILL] sellerId 백필 ?�작...');    try {    const snap = await getDocs(collection(db, 'products'));    console.log(`[BACKFILL] �?${snap.docs.length}�?문서 발견`);        let fixed = 0;    let skipped = 0;        for (const d of snap.docs) {      const p = d.data();            if (!p?.sellerId) {        const sid = pickSellerIdFromDoc(p);        if (sid) {          console.log(`[BACKFILL] 문서 ${d.id} ?�정: sellerId = ${sid}`);                    await updateDoc(doc(db, 'products', d.id), {            sellerId: sid,            updatedAt: serverTimestamp()          });                    fixed++;          await new Promise(r => setTimeout(r, 100)); // 과속 방�? (100ms)        } else {          console.warn(`[BACKFILL] 문서 ${d.id}: sellerId�?찾을 ???�음`, p);          skipped++;        }      } else {        console.log(`[BACKFILL] 문서 ${d.id}: ?��? sellerId 존재 (${p.sellerId})`);      }    }        console.log(`[BACKFILL] ?�료! ?�정: ${fixed}, 건너?�: ${skipped}`);    return { fixed, skipped, total: snap.docs.length };      } catch (error) {    console.error('[BACKFILL] 백필 ?�패:', error);    throw error;  }}// market 컬렉?�도 ?�께 백필 (backward compatibility)export async function backfillMarketSellerId() {  console.log('[BACKFILL] market 컬렉??sellerId 백필 ?�작...');    try {    const snap = await getDocs(collection(db, 'market'));    console.log(`[BACKFILL] market 컬렉??�?${snap.docs.length}�?문서 발견`);        let fixed = 0;    let skipped = 0;        for (const d of snap.docs) {      const p = d.data();            if (!p?.sellerId) {        const sid = pickSellerIdFromDoc(p);        if (sid) {          console.log(`[BACKFILL] market 문서 ${d.id} ?�정: sellerId = ${sid}`);                    await updateDoc(doc(db, 'market', d.id), {            sellerId: sid,            updatedAt: serverTimestamp()          });                    fixed++;          await new Promise(r => setTimeout(r, 100)); // 과속 방�? (100ms)        } else {          console.warn(`[BACKFILL] market 문서 ${d.id}: sellerId�?찾을 ???�음`, p);          skipped++;        }      } else {        console.log(`[BACKFILL] market 문서 ${d.id}: ?��? sellerId 존재 (${p.sellerId})`);      }    }        console.log(`[BACKFILL] market ?�료! ?�정: ${fixed}, 건너?�: ${skipped}`);    return { fixed, skipped, total: snap.docs.length };      } catch (error) {    console.error('[BACKFILL] market 백필 ?�패:', error);    throw error;  }}// ?�체 백필 ?�행export async function backfillAllSellerId() {  console.log('[BACKFILL] ?�체 sellerId 백필 ?�작...');    const productsResult = await backfillSellerId();  const marketResult = await backfillMarketSellerId();    const totalFixed = productsResult.fixed + marketResult.fixed;  const totalSkipped = productsResult.skipped + marketResult.skipped;  const totalDocs = productsResult.total + marketResult.total;    console.log(`[BACKFILL] ?�체 ?�료! �??�정: ${totalFixed}, �?건너?�: ${totalSkipped}, �?문서: ${totalDocs}`);    return {    products: productsResult,    market: marketResult,    total: { fixed: totalFixed, skipped: totalSkipped, docs: totalDocs }  };}
