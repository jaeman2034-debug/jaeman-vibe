"use strict";
// 빠른 백필 ?�틸리티 (?�서??버전)import {  doc, getDoc, setDoc, updateDoc, serverTimestamp, deleteDoc} from 'firebase/firestore';import { db, auth } from '@/lib/firebase';// ??건만 보정 (?�서?? products???�으�?market?�서 가?��????�성)export async function setMyselfAsSeller(productId: string) {  const uid = auth.currentUser?.uid;  if (!uid) throw new Error("로그?�이 ?�요?�니??");  if (!productId) throw new Error("?�품 ID가 비어 ?�습?�다.");  const pRef = doc(db, "products", productId);  const pSnap = await getDoc(pRef);  if (pSnap.exists()) {    // ???��? products???�으�??�데?�트�?    await updateDoc(pRef, {      sellerId: uid,      updatedAt: serverTimestamp(),    });    console.log("??products 문서??sellerId ?�정 ?�료:", productId);    return;  }  // ⬇️ products???�으�?market?�서 가?��???마이그레?�션 + sellerId 지??  const mRef = doc(db, "market", productId);  const mSnap = await getDoc(mRef);  if (!mSnap.exists()) {    // market?�도 ?�으�?최소 문서?�도 ?�성    await setDoc(pRef, {      sellerId: uid,      status: "?�매�?,      title: "",      price: 0,      createdAt: serverTimestamp(),      updatedAt: serverTimestamp(),      migratedFrom: "manual-empty",    });    console.log("?�️ market???�본???�어 최소 ?�드�??�성?�습?�다:", productId);    return;  }  const d = mSnap.data() as any;  // ?�요 ?�드�??��?(?�는 �?기본�?  await setDoc(    pRef,    {      title: d.title ?? "",      price: d.price ?? 0,      description: d.description ?? "",      category: d.category ?? "",      images: d.images ?? [],      geo: d.geo ?? null,      address: d.address ?? null,      status: d.status ?? "?�매�?,      sellerId: uid,                     // ???�너 ?�정      createdAt: d.createdAt ?? serverTimestamp(),      updatedAt: serverTimestamp(),      migratedFrom: "market",    },    { merge: true }  );  // (?�택) market 문서 ?�리  try { await deleteDoc(mRef); } catch {}  console.log("??market ??products 마이그레?�션 + sellerId ?�정 ?�료:", productId);}// ?�재 ?�용?�의 모든 ?�품??sellerId ?�정 (백필 + ?�백 지??export async function backfillMyProducts() {  const uid = auth.currentUser?.uid;  if (!uid) throw new Error('로그?�이 ?�요?�니??);    console.log('?�� ???�품 sellerId 백필 ?�작...');    try {    // ?�재 ?�품 ?�세 ?�이지??ID�?가?�오??방법    const currentProductId = window.location.pathname.split('/').pop();    if (currentProductId && currentProductId !== 'market') {      await setMyselfAsSeller(currentProductId);      console.log('???�재 ?�품 백필 ?�료');            // ?�이지 ?�로고침?�로 변경사??반영      window.location.reload();    } else {      console.log('?�️ ?�품 ?�세 ?�이지?�서 ?�행?�주?�요');    }  } catch (error) {    console.error('??백필 ?�패:', error);    throw error;  }}// ?�러 ?�품????번에 백필 (?�백 지??export async function backfillAllMyProducts() {  const uid = auth.currentUser?.uid;  if (!uid) throw new Error('로그?�이 ?�요?�니??);    console.log('?�� 모든 ?�품 sellerId 백필 ?�작...');    try {    // 1. products 컬렉?�에?????�품 찾기    const productsQuery = query(      collection(db, 'products'),      where('sellerId', '==', uid)    );    const productsSnapshot = await getDocs(productsQuery);        // 2. market 컬렉?�에?????�품 찾기 (?�백)    const marketQuery = query(      collection(db, 'market'),      where('sellerId', '==', uid)    );    const marketSnapshot = await getDocs(marketQuery);        console.log(`?�� ?�품 ?�황: products ${productsSnapshot.size}�? market ${marketSnapshot.size}�?);        let processedCount = 0;        // 3. products???�는 ?�품??sellerId ?�정    for (const doc of productsSnapshot.docs) {      try {        await updateDoc(doc.ref, {          sellerId: uid,          updatedAt: serverTimestamp(),        });        processedCount++;        console.log(`??products: ${doc.id} sellerId ?�정 ?�료`);      } catch (error) {        console.warn(`?�️ products: ${doc.id} sellerId ?�정 ?�패:`, error);      }    }        // 4. market?�만 ?�는 ?�품??products�?마이그레?�션 + sellerId ?�정    for (const doc of marketSnapshot.docs) {      try {        const productId = doc.id;        const productData = doc.data();                // products???�일 ID�??�성        await setDoc(          doc(db, 'products', productId),          {            title: productData.title ?? "",            price: productData.price ?? 0,            description: productData.description ?? "",            category: productData.category ?? "",            images: productData.images ?? [],            geo: productData.geo ?? null,            address: productData.address ?? null,            status: productData.status ?? "?�매�?,            sellerId: uid,                     // ???�너 ?�정            createdAt: productData.createdAt ?? serverTimestamp(),            updatedAt: serverTimestamp(),            migratedFrom: "market-backfill",          },          { merge: true }        );                // (?�택) market 문서 ?�리        try { await deleteDoc(doc.ref); } catch {}                processedCount++;        console.log(`??market ??products 마이그레?�션: ${productId}`);      } catch (error) {        console.warn(`?�️ market ??products 마이그레?�션 ?�패 ${doc.id}:`, error);      }    }        console.log(`?�� 백필 ?�료! �?${processedCount}�??�품 처리??);    return processedCount;      } catch (error) {    console.error('???�체 백필 ?�패:', error);    throw error;  }}// 브라?��? 콘솔?�서 직접 ?�행??export function quickBackfill() {  console.log('?? 빠른 백필 ?�행...');  console.log('?�용�? backfillMyProducts() ?�는 setMyselfAsSeller("?�품ID") ?�는 backfillAllMyProducts()');    // ?�역 ?�수�??�록 (브라?��? 콘솔?�서 직접 ?�출 가??  (window as any).backfillMyProducts = backfillMyProducts;  (window as any).setMyselfAsSeller = setMyselfAsSeller;  (window as any).backfillAllMyProducts = backfillAllMyProducts;    console.log('???�역 ?�수 ?�록 ?�료');  console.log('?�� ?�재 ?�품 백필: backfillMyProducts()');  console.log('?�� ?�정 ?�품 백필: setMyselfAsSeller("?�품ID")');  console.log('?�� 모든 ?�품 백필: backfillAllMyProducts()');}
