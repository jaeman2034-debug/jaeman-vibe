"use strict";
// src/utils/speechEmail.tsximport React, { useState, useRef, useCallback, useEffect } from 'react';// === ?�메??STT ?�픽???�틸 ===const AT_WORDS = /(골뱅????\bat\b)/g;         // '@' ?�리�?const DOT_WORDS = /(????�?/g;                // '.' 치환 ?�용const EMAIL_ID_ALLOWED = /[a-z0-9._-]/;         // ?�용 문자const sanitizeId = (s: string) =>  (s || "")    .toLowerCase()    // '@' ?�오�??�까지???�을 모두 ?�거 (?�환 방�?)    .replace(/\./g, "")    .split("")    .filter(ch => EMAIL_ID_ALLOWED.test(ch))    .join("");const sanitizeDomain = (s: string) =>  (s || "")    .toLowerCase()    .replace(DOT_WORDS, ".")    .replace(/\s+/g, "")    .replace(/\.{2,}/g, ".")    .replace(/^\./, "")    .replace(/\.$/, "");// ?�메???�국??축약 보정const fixDomainCommon = (dom: string) => {  if (!dom) return dom;  if (dom === "gmail") return "gmail.com";  if (dom === "naver") return "naver.com";  if (dom === "daum") return "daum.net";  if (dom === "hanmail") return "hanmail.net";  if (dom === "kakao") return "kakao.com";  return dom;};// === ?�메??STT ?�심 로직 ===export const onEmailSpeechFinal = (  raw: string,  mode: "id" | "domain",  emailId: string,  emailDomain: string,  setEmailId: (id: string) => void,  setEmailDomain: (id: string | ((prev: string) => string)) => void,  setMode: (mode: "id" | "domain") => void,  domainSwitchedRef: React.MutableRefObject<boolean>,  pushLog: (msg: string) => void) => {  let t = (raw || "").toLowerCase().trim();  // 공통 치환  t = t.replace(DOT_WORDS, ".");     // '????�? -> '.'  t = t.replace(AT_WORDS, "@");      // '골뱅????at' -> '@'  if (mode === "id") {    // '@'가 ?�어?�면 ??번만 ?�메??모드�??�환    if (t.includes("@")) {      const [left, right = ""] = t.split("@");      // 1) ?��? ID ?�리 ('.' ?��? 무시)      const idNew = sanitizeId(emailId + left);      setEmailId(idNew);      // 2) ?�메??모드�?'??번만' ?�환      if (!domainSwitchedRef.current) {        domainSwitchedRef.current = true;        setMode("domain");        pushLog("?�� ?�메???�력 모드�??�환");      }      // 3) �??�메???�드 반영      const domSeed = fixDomainCommon(sanitizeDomain(right));      setEmailDomain(prev => (prev ? prev : domSeed));      return;    }    // '@' ?�에???��? ?�환/?�적??'.'???��? ?�음    const idAcc = sanitizeId(emailId + t);    setEmailId(idAcc);    pushLog(`?�� ID 조각 추�?: ${t} ???�적: ${idAcc}`);    return;  }  // mode === 'domain'  const domAcc = fixDomainCommon(sanitizeDomain(emailDomain + t));  setEmailDomain(domAcc);  pushLog(`?�� ?�메??조각 추�?: ${t} ???�적: ${domAcc}`);};// === ?�료 ?�보 검??===export const isLikelyEmail = (id: string, dom: string) =>  !!id && !!dom && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(`${id}@${dom}`);// === EmailVoiceField 컴포?�트 ===interface EmailVoiceFieldProps {  emailId: string;  emailDomain: string;  mode: "id" | "domain";  setEmailId: (id: string) => void;  setEmailDomain: (domain: string) => void;  setMode: (mode: "id" | "domain") => void;  domainSwitchedRef: React.MutableRefObject<boolean>;  pushLog: (msg: string) => void;  onTryNext: () => void;  onFinal?: (text: string) => void;   // ??추�?: 최종 결과 ?�달}export const EmailVoiceField: React.FC<EmailVoiceFieldProps> = ({  emailId,  emailDomain,  mode,  setEmailId,  setEmailDomain,  setMode,  domainSwitchedRef,  pushLog,  onTryNext,  onFinal}) => {  // ?�성 ?�식�?관???�태 �?ref  const [listening, setListening] = useState(false);  const userStopRef = useRef(false);   // ?�용?��? 직접 멈췄?��? ?��?  const recRef = useRef<any>(null);  // ?�성 ?�식�??�성 �??�정  const ensureRecognizer = useCallback(() => {    const SR = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;    if (!SR) return null;    if (!recRef.current) {      const rec = new SR();      rec.lang = "ko-KR";      rec.interimResults = true;   // ??중간 결과 ON      rec.continuous = true;       // ???�속 ?�식 ON      rec.maxAlternatives = 3;            // 최종 문장�?모아??부모에 ?�달      rec.onresult = (e: any) => {        const finals: string[] = [];        for (let i = e.resultIndex; i < e.results.length; i++) {          const alt = e.results[i];          if (alt.isFinal) {            for (let k = 0; k < alt.length; k++) finals.push(alt[k].transcript);          }        }        if (finals.length > 0) {          const txt = finals.join(" ");          // 부모로 최종 결과 ?�달          onFinal?.(txt);          // ?�메???�적 ?�수 ?�출 (기존 로직 ?��?)          onEmailSpeechFinal(            txt,            mode,            emailId,            emailDomain,            setEmailId,            setEmailDomain,            setMode,            domainSwitchedRef,            pushLog          );        }      };      rec.onerror = (ev: any) => {        setListening(false);        // ?�용?��? 멈춘 �??�니�? aborted ???�러�??�시??        if (!userStopRef.current && ev?.error !== "aborted") {          setTimeout(() => { try { rec.start(); setListening(true); } catch {} }, 600);        }      };      rec.onend = () => {        setListening(false);        // ?�용?��? 멈춘 �??�니�?바로 ?�시??        if (!userStopRef.current) {          setTimeout(() => { try { rec.start(); setListening(true); } catch {} }, 600);        }      };            recRef.current = rec;    }    return recRef.current;  }, [mode, emailId, emailDomain, setEmailId, setEmailDomain, setMode, domainSwitchedRef, pushLog, onFinal]);  // ?�성 ?�식 ?�작  const start = useCallback(() => {    const rec = ensureRecognizer();    if (!rec) return alert("??브라?��????�성 ?�식??지?�하지 ?�아??");    userStopRef.current = false;    try { rec.start(); setListening(true); } catch {}  }, [ensureRecognizer]);  // ?�성 ?�식 중�?  const stop = useCallback(() => {    userStopRef.current = true;    try { recRef.current?.stop(); } catch {}    setListening(false);  }, []);  // 컴포?�트 ?�마?�트 ???�리  useEffect(() => {    return () => {      userStopRef.current = true;      try { recRef.current?.stop(); recRef.current?.abort(); } catch {}    };  }, []);  return (    <div style={{ marginTop: 16 }}>      <label>?�메??(?�성 ?�력)</label>      {/* ?�성 ?�식 버튼 추�? */}      <div style={{ margin: "8px 0", display: "flex", gap: 8 }}>        <button           type="button"           onClick={() => (listening ? stop() : start())}          style={{            padding: "8px 16px",            borderRadius: 8,            border: "1px solid rgba(34,197,94,0.5)",            background: listening ? "rgba(239,68,68,0.2)" : "rgba(34,197,94,0.2)",            color: listening ? "#f87171" : "#22c55e",            cursor: "pointer",            fontWeight: "bold"          }}        >          {listening ? "?�기 종료" : "말하�?}        </button>        {listening && (          <div style={{             display: "flex",             alignItems: "center",             padding: "8px 12px",             background: "rgba(34,197,94,0.1)",             borderRadius: 6,            fontSize: 12,            color: "#22c55e"          }}>            ?�� ?�성 ?�식 �?.. (?�동 ?�시??          </div>        )}      </div>      <div style={{ margin: "8px 0", padding: 12, background: "#1f2330", borderRadius: 8 }}>        <div style={{ fontSize: 13, opacity: 0.85, marginBottom: 6 }}>          ?�성 ?�력 �? {mode === "id" ? "?�이??모드" : "?�메??모드"}        </div>        <div style={{ display: "flex", gap: 6, flexWrap: "wrap" }}>          <code style={{ padding: "4px 8px", borderRadius: 6, background: "#0e111a" }}>            {emailId || "ID ?�력 �?.."}          </code>          <code style={{ padding: "4px 8px", borderRadius: 6, background: "#0e111a" }}>@</code>          <code style={{ padding: "4px 8px", borderRadius: 6, background: "#0e111a" }}>            {emailDomain || "?�메???�력 �?.."}          </code>        </div>        {emailId && emailDomain && (          <div style={{ marginTop: 8, padding: 8, background: "rgba(34,197,94,0.1)", borderRadius: 6, fontSize: 12 }}>            ?�성???�메?? <strong>{emailId}@{emailDomain}</strong>          </div>        )}      </div>      {/* ?�주 ?�는 ?�메???�축 버튼 */}      <div style={{ display: "flex", gap: 8, flexWrap: "wrap", marginBottom: 8 }}>        {["gmail.com","naver.com","daum.net","outlook.com"].map(d => (          <button             key={d}             type="button"             onClick={()=>{               setMode("domain");               domainSwitchedRef.current=true;               setEmailDomain(d);             }}            style={{              padding: "4px 8px",              borderRadius: 6,              border: "1px solid rgba(255,255,255,0.2)",              background: "rgba(255,255,255,0.08)",              color: "#fff",              fontSize: 12,              cursor: "pointer"            }}          >            {d}          </button>        ))}      </div>      {/* ID가 비어?�을 ???�메??모드?�서 ID ?�력 ?�도 */}      {mode === "domain" && !emailId && (        <div style={{ marginTop: 8, padding: 8, background: "rgba(239,68,68,0.1)", borderRadius: 6, border: "1px solid rgba(239,68,68,0.3)" }}>          <div style={{ fontSize: 12, color: "#f87171", marginBottom: 6 }}>            ?�️ ?�이?��? 비어?�습?�다. 먼�? ?�이?��? ?�력??주세??          </div>          <button            type="button"            onClick={() => {               setMode("id");               domainSwitchedRef.current = false;               pushLog("?�� ID ?�력 모드�??�아가�?);            }}            style={{              padding: "6px 12px",              borderRadius: 6,              border: "1px solid rgba(239,68,68,0.5)",              background: "rgba(239,68,68,0.2)",              color: "#f87171",              fontSize: 12,              cursor: "pointer"            }}          >            ID 먼�? ?�력?�기          </button>        </div>      )}      <div style={{ display: "flex", gap: 8, marginTop: 8 }}>        <button           type="button"           onClick={onTryNext}           disabled={!isLikelyEmail(emailId, fixDomainCommon(emailDomain))}          style={{            padding: "8px 16px",            borderRadius: 8,            border: "1px solid rgba(139,92,246,0.5)",            background: "linear-gradient(135deg,#8b5cf6,#22d3ee)",            color: "#fff",            cursor: "pointer"          }}        >          ?�음        </button>        <button          type="button"          onClick={() => {            setEmailId("");            setEmailDomain("");            setMode("id");            domainSwitchedRef.current = false;            pushLog("?�️ ?�메???�력 초기??);          }}          style={{            padding: "8px 16px",            borderRadius: 8,            border: "1px solid rgba(255,255,255,0.2)",            background: "rgba(255,255,255,0.08)",            color: "#fff",            cursor: "pointer"          }}        >          초기??        </button>      </div>    </div>  );}; 
