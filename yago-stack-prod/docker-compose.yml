version: "3.8"

services:
  nginx:
    image: nginx:1.27-alpine
    container_name: yago-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - n8n
      - cast-bridge
    networks:
      - yago_net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  n8n:
    image: n8nio/n8n:1.74.0
    container_name: yago-n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=yago.ai
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://yago.ai/
      - GENERIC_TIMEZONE=Asia/Seoul
      - TZ=Asia/Seoul
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASS}
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - FIREBASE_TOKEN=${FIREBASE_TOKEN}
      - CAST_BRIDGE_URL=https://yago.ai/cast
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT}
      # Kakao 설정
      - KAKAO_API_KEY=${KAKAO_API_KEY}
      # Google 설정
      - GOOGLE_MAPS_KEY=${GOOGLE_MAPS_KEY}
      # 스피커 설정
      - SPEAKER_LIVING_ROOM=${SPEAKER_LIVING_ROOM}
      - SPEAKER_BEDROOM=${SPEAKER_BEDROOM}
      - SPEAKER_KITCHEN=${SPEAKER_KITCHEN}
      # 보안
      - N8N_WEBHOOK_SECRET=${N8N_WEBHOOK_SECRET}
    volumes:
      - ./n8n_data:/home/node/.n8n
      - ./backups/n8n:/home/node/backups
    networks:
      - yago_net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  cast-bridge:
    build: ./cast-bridge
    container_name: yago-cast
    restart: unless-stopped
    environment:
      - TZ=Asia/Seoul
      - NODE_ENV=production
      - SPEAKER_LIVING_ROOM=${SPEAKER_LIVING_ROOM}
      - SPEAKER_BEDROOM=${SPEAKER_BEDROOM}
      - SPEAKER_KITCHEN=${SPEAKER_KITCHEN}
    networks:
      - yago_net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  watchtower:
    image: containrrr/watchtower
    container_name: yago-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./watchtower-config.json:/config.json:ro
    command: --cleanup --interval 3600 --include-stopped --revive-stopped
    networks:
      - yago_net
    environment:
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}
      - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=yago-watchtower

  backup-scheduler:
    image: alpine:latest
    container_name: yago-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /scripts/backup-firestore.sh' >> /var/spool/cron/crontabs/root &&
        echo '0 3 * * * /scripts/backup-n8n.sh' >> /var/spool/cron/crontabs/root &&
        echo '0 4 * * * /scripts/backup-logs.sh' >> /var/spool/cron/crontabs/root &&
        crond -f -l 2
      "
    networks:
      - yago_net

  monitoring:
    image: prom/prometheus:latest
    container_name: yago-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - yago_net

  grafana:
    image: grafana/grafana:latest
    container_name: yago-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - yago_net

networks:
  yago_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
